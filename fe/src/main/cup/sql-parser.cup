// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package org.apache.impala.analysis;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java_cup.runtime.Symbol;
import java_cup.runtime.ExtendSymbol;

import org.apache.impala.analysis.SyntaxBlock;
import org.apache.impala.analysis.ObjectSyntaxBlock;
import org.apache.impala.analysis.ColumnDef;
import org.apache.impala.analysis.ColumnDef.Option;
import org.apache.impala.analysis.UnionStmt.Qualifier;
import org.apache.impala.analysis.UnionStmt.UnionOperand;
import org.apache.impala.analysis.RangePartition;
import org.apache.impala.analysis.AlterTableAddDropRangePartitionStmt.Operation;
import org.apache.impala.catalog.ArrayType;
import org.apache.impala.catalog.MapType;
import org.apache.impala.catalog.RowFormat;
import org.apache.impala.catalog.ScalarType;
import org.apache.impala.catalog.StructField;
import org.apache.impala.catalog.StructType;
import org.apache.impala.catalog.Type;
import org.apache.impala.catalog.View;
import org.apache.impala.common.AnalysisException;
import org.apache.impala.common.Pair;
import org.apache.impala.thrift.TCatalogObjectType;
import org.apache.impala.thrift.TDescribeOutputStyle;
import org.apache.impala.thrift.TFunctionCategory;
import org.apache.impala.thrift.THdfsFileFormat;
import org.apache.impala.thrift.TPrivilegeLevel;
import org.apache.impala.thrift.TShowStatsOp;
import org.apache.impala.thrift.TTablePropertyType;

parser code {:
  private Symbol errorToken_;

  // Set if the errorToken_ to be printed in the error message has a different name, e.g.
  // when parsing identifiers instead of defined keywords. This is necessary to avoid
  // conflicting keywords.
  private String expectedTokenName_;

  // list of expected tokens ids from current parsing state
  // for generating syntax error message
  private final List<Integer> expectedTokenIds_ = new ArrayList<Integer>();

  // to avoid reporting trivial tokens as expected tokens in error messages
  private boolean reportExpectedToken(Integer tokenId, int numExpectedTokens) {
    if (SqlScanner.isKeyword(tokenId) ||
        tokenId.intValue() == SqlParserSymbols.COMMA ||
        tokenId.intValue() == SqlParserSymbols.IDENT) {
      return true;
    } else {
      // if this is the only valid token, always report it
      return numExpectedTokens == 1;
    }
  }

  private String getErrorTypeMessage(int lastTokenId) {
    String msg = null;
    switch (lastTokenId) {
      case SqlParserSymbols.UNMATCHED_STRING_LITERAL:
        msg = "Unmatched string literal";
        break;
      case SqlParserSymbols.NUMERIC_OVERFLOW:
        msg = "Numeric overflow";
        break;
      default:
        msg = "Syntax error";
        break;
    }
    return msg;
  }

  // override to save error token
  public void syntax_error(java_cup.runtime.Symbol token) {
    errorToken_ = token;

    // derive expected tokens from current parsing state
    expectedTokenIds_.clear();
    int state = ((Symbol)stack.peek()).parse_state;
    // get row of actions table corresponding to current parsing state
    // the row consists of pairs of <tokenId, actionId>
    // a pair is stored as row[i] (tokenId) and row[i+1] (actionId)
    // the last pair is a special error action
    short[] row = action_tab[state];
    short tokenId;
    // the expected tokens are all the symbols with a
    // corresponding action from the current parsing state
    for (int i = 0; i < row.length-2; ++i) {
      // get tokenId and skip actionId
      tokenId = row[i++];
      expectedTokenIds_.add(Integer.valueOf(tokenId));
    }
  }

  // override to keep it from calling report_fatal_error()
  @Override
  public void unrecovered_syntax_error(Symbol cur_token)
      throws Exception {
    throw new Exception(getErrorTypeMessage(cur_token.sym));
  }

  /**
   * Manually throw a parse error on a given symbol for special circumstances.
   *
   * @symbolName
   *   name of symbol on which to fail parsing
   * @symbolId
   *   id of symbol from SqlParserSymbols on which to fail parsing
   */
  public void parseError(String symbolName, int symbolId) throws Exception {
    parseError(symbolName, symbolId, null);
  }

  /**
   * Same as parseError() above but allows the error token to have a different
   * name printed as the expected token.
   */
  public void parseError(String symbolName, int symbolId, String expectedTokenName)
      throws Exception {
    expectedTokenName_ = expectedTokenName;
    Symbol errorToken = getSymbolFactory().newSymbol(symbolName, symbolId,
        ((Symbol) stack.peek()), ((Symbol) stack.peek()), null);
    // Call syntax error to gather information about expected tokens, etc.
    // syntax_error does not throw an exception
    syntax_error(errorToken);
    // Unrecovered_syntax_error throws an exception and will terminate parsing
    unrecovered_syntax_error(errorToken);
  }

  // Returns error string, consisting of a shortened offending line
  // with a '^' under the offending token. Assumes
  // that parse() has been called and threw an exception
  public String getErrorMsg(String stmt) {
    if (errorToken_ == null || stmt == null) return null;
    String[] lines = stmt.split("\n");
    StringBuffer result = new StringBuffer();
    result.append(getErrorTypeMessage(errorToken_.sym) + " in line ");
    result.append(errorToken_.left);
    result.append(":\n");

    // errorToken_.left is the line number of error.
    // errorToken_.right is the column number of the error.
    String errorLine = lines[errorToken_.left - 1];
    // If the error is that additional tokens are expected past the end,
    // errorToken_.right will be past the end of the string.
    int lastCharIndex = Math.min(errorLine.length(), errorToken_.right);
    int maxPrintLength = 60;
    int errorLoc = 0;
    if (errorLine.length() <= maxPrintLength) {
      // The line is short. Print the entire line.
      result.append(errorLine);
      result.append('\n');
      errorLoc = errorToken_.right;
    } else {
      // The line is too long. Print maxPrintLength/2 characters before the error and
      // after the error.
      int contextLength = maxPrintLength / 2 - 3;
      String leftSubStr;
      if (errorToken_.right > maxPrintLength / 2) {
        leftSubStr = "..." + errorLine.substring(errorToken_.right - contextLength,
            lastCharIndex);
      } else {
        leftSubStr = errorLine.substring(0, errorToken_.right);
      }
      errorLoc = leftSubStr.length();
      result.append(leftSubStr);
      if (errorLine.length() - errorToken_.right > maxPrintLength / 2) {
        result.append(errorLine.substring(errorToken_.right,
           errorToken_.right + contextLength) + "...");
      } else {
        result.append(errorLine.substring(lastCharIndex));
      }
      result.append("\n");
    }

    // print error indicator
    for (int i = 0; i < errorLoc - 1; ++i) {
      result.append(' ');
    }
    result.append("^\n");

    // only report encountered and expected tokens for syntax errors
    if (errorToken_.sym == SqlParserSymbols.UNMATCHED_STRING_LITERAL ||
        errorToken_.sym == SqlParserSymbols.NUMERIC_OVERFLOW) {
      return result.toString();
    }

    // append last encountered token
    result.append("Encountered: ");
    String lastToken =
      SqlScanner.tokenIdMap.get(Integer.valueOf(errorToken_.sym));
    if (lastToken != null) {
      result.append(lastToken);
    } else {
      result.append("Unknown last token with id: " + errorToken_.sym);
    }

    // append expected tokens
    result.append('\n');
    result.append("Expected: ");
    if (expectedTokenName_ == null) {
      String expectedToken = null;
      Integer tokenId = null;
      for (int i = 0; i < expectedTokenIds_.size(); ++i) {
        tokenId = expectedTokenIds_.get(i);
        if (reportExpectedToken(tokenId, expectedTokenIds_.size())) {
          expectedToken = SqlScanner.tokenIdMap.get(tokenId);
          result.append(expectedToken + ", ");
        }
      }
      // remove trailing ", "
      result.delete(result.length()-2, result.length());
    } else {
      result.append(expectedTokenName_);
    }
    result.append('\n');

    return result.toString();
  }
:};

// List of keywords. Please keep them sorted alphabetically.
// ALL KEYWORDS ALSO NEED TO BE ADDED TO THE ident_or_kw PRODUCTION.
terminal
  KW_ADD, KW_AGGREGATE, KW_ALL, KW_ALTER, KW_ANALYTIC, KW_AND, KW_ANTI, KW_API_VERSION,
  KW_ARRAY, KW_AS, KW_ASC, KW_AVRO, KW_BETWEEN, KW_BIGINT, KW_BINARY, KW_BLOCKSIZE,
  KW_BOOLEAN, KW_BY, KW_CACHED, KW_CASCADE, KW_CASE, KW_CAST, KW_CHANGE,
  KW_CHAR, KW_CLASS, KW_CLOSE_FN, KW_COLUMN, KW_COLUMNS, KW_COMMENT, KW_COMPRESSION,
  KW_COMPUTE, KW_CREATE, KW_CROSS, KW_CURRENT, KW_DATA, KW_DATABASE, KW_DATABASES,
  KW_DATE, KW_DATETIME, KW_DECIMAL, KW_DEFAULT, KW_DELETE, KW_DELIMITED, KW_DESC,
  KW_DESCRIBE, KW_DISTINCT, KW_DIV, KW_DOUBLE, KW_DROP, KW_ELSE,
  KW_ENCODING, KW_END, KW_ESCAPED, KW_EXISTS, KW_EXPLAIN, KW_EXTENDED, KW_EXTERNAL,
  KW_FALSE, KW_FIELDS, KW_FILEFORMAT, KW_FILES, KW_FINALIZE_FN, KW_FIRST, KW_FLOAT,
  KW_FOLLOWING, KW_FOR, KW_FORMAT, KW_FORMATTED, KW_FROM, KW_FULL, KW_FUNCTION,
  KW_FUNCTIONS, KW_GRANT, KW_GROUP, KW_HASH, KW_IGNORE, KW_HAVING, KW_IF, KW_ILIKE,
  KW_IN, KW_INCREMENTAL, KW_INIT_FN, KW_INNER, KW_INPATH, KW_INSERT, KW_INT,
  KW_INTERMEDIATE, KW_INTERVAL, KW_INTO, KW_INVALIDATE, KW_IREGEXP, KW_IS, KW_JOIN,
  KW_KUDU, KW_LAST, KW_LEFT, KW_LIKE, KW_LIMIT, KW_LINES, KW_LOAD, KW_LOCATION, KW_MAP,
  KW_MERGE_FN, KW_METADATA, KW_NOT, KW_NULL, KW_NULLS, KW_OFFSET, KW_ON, KW_OR, KW_ORDER,
  KW_OUTER, KW_OVER, KW_OVERWRITE, KW_PARQUET, KW_PARQUETFILE, KW_PARTITION,
  KW_PARTITIONED, KW_PARTITIONS, KW_PRECEDING, KW_PREPARE_FN, KW_PRIMARY, KW_PRODUCED,
  KW_PURGE, KW_RANGE, KW_RCFILE, KW_RECOVER, KW_REFRESH, KW_REGEXP, KW_RENAME, KW_REPLACE,
  KW_REPLICATION, KW_RESTRICT, KW_RETURNS, KW_REVOKE, KW_RIGHT, KW_RLIKE, KW_ROLE,
  KW_ROLES, KW_ROW, KW_ROWS, KW_SCHEMA, KW_SCHEMAS, KW_SELECT, KW_SEMI, KW_SEQUENCEFILE,
  KW_SERDEPROPERTIES, KW_SERIALIZE_FN, KW_SET, KW_SHOW, KW_SMALLINT, KW_STORED,
  KW_STRAIGHT_JOIN, KW_STRING, KW_STRUCT, KW_SYMBOL, KW_TABLE, KW_TABLES,
  KW_TBLPROPERTIES, KW_TERMINATED, KW_TEXTFILE, KW_THEN, KW_TIMESTAMP, KW_TINYINT,
  KW_TRUNCATE, KW_STATS, KW_TO, KW_TRUE, KW_UNBOUNDED, KW_UNCACHED, KW_UNION, KW_UPDATE,
  KW_UPDATE_FN, KW_UPSERT, KW_USE, KW_USING, KW_VALUES, KW_VARCHAR, KW_VIEW, KW_WHEN,
  KW_WHERE, KW_WITH;

terminal COLON, SEMICOLON, COMMA, DOT, DOTDOTDOT, STAR, LPAREN, RPAREN, LBRACKET,
  RBRACKET, DIVIDE, MOD, ADD, SUBTRACT;
terminal BITAND, BITOR, BITXOR, BITNOT;
terminal EQUAL, NOT, NOTEQUAL, LESSTHAN, GREATERTHAN;
terminal FACTORIAL; // Placeholder terminal for postfix factorial operator
terminal String IDENT;
terminal String EMPTY_IDENT;
terminal String NUMERIC_OVERFLOW;
terminal String COMMENTED_PLAN_HINTS;
terminal BigDecimal INTEGER_LITERAL;
terminal BigDecimal DECIMAL_LITERAL;
terminal String STRING_LITERAL;
terminal String UNMATCHED_STRING_LITERAL;
terminal String UNEXPECTED_CHAR;

// IMPALA-3726 introduced the DEFAULT keyword which could break existing applications
// that use the identifier "KEYWORD" as database, column or table names. To avoid that,
// the ident_or_default non-terminal is introduced and should be used instead of IDENT.
nonterminal ObjectSyntaxBlock<String> ident_or_keyword, ident_or_default;
nonterminal StatementBase stmt;
// Single select statement.
nonterminal SelectStmt select_stmt;
// Single values statement.
nonterminal ValuesStmt values_stmt;
// Select or union statement.
nonterminal QueryStmt query_stmt;
nonterminal QueryStmt opt_query_stmt;
// Single select_stmt or parenthesized query_stmt.
nonterminal QueryStmt union_operand;
// List of select or union blocks connected by UNION operators or a single select block.
nonterminal ObjectSyntaxBlock<List<UnionOperand>> union_operand_list;
// List of union operands consisting of constant selects.
nonterminal ObjectSyntaxBlock<List<UnionOperand>> values_operand_list;
// USE stmt
nonterminal UseStmt use_stmt;
nonterminal SetStmt set_stmt;
nonterminal ShowTablesStmt show_tables_stmt;
nonterminal ShowDbsStmt show_dbs_stmt;
nonterminal ShowStatsStmt show_stats_stmt, show_partitions_stmt,
  show_range_partitions_stmt;
nonterminal ObjectSyntaxBlock<String> show_pattern;
nonterminal ShowFilesStmt show_files_stmt;
nonterminal DescribeDbStmt describe_db_stmt;
nonterminal DescribeTableStmt describe_table_stmt;
nonterminal ShowCreateTableStmt show_create_tbl_stmt;
nonterminal ObjectSyntaxBlock<TCatalogObjectType> show_create_tbl_object_type;
nonterminal ShowCreateFunctionStmt show_create_function_stmt;
nonterminal ObjectSyntaxBlock<TDescribeOutputStyle> describe_output_style;
nonterminal LoadDataStmt load_stmt;
nonterminal TruncateStmt truncate_stmt;
nonterminal ResetMetadataStmt reset_metadata_stmt;
// List of select blocks connected by UNION operators, with order by or limit.
nonterminal QueryStmt union_with_order_by_or_limit;
nonterminal SelectList select_clause;
nonterminal SelectList select_list;
nonterminal SelectListItem select_list_item;
nonterminal SelectListItem star_expr;
nonterminal Expr expr, non_pred_expr, arithmetic_expr, timestamp_arithmetic_expr;
nonterminal ObjectSyntaxBlock<ArrayList<Expr>> expr_list;
nonterminal ObjectSyntaxBlock<String> alias_clause;
nonterminal ObjectSyntaxBlock<ArrayList<String>> ident_list, primary_keys;
nonterminal ObjectSyntaxBlock<ArrayList<String>> opt_ident_list;
nonterminal TableName table_name;
nonterminal FunctionName function_name;
nonterminal Expr where_clause;
nonterminal Predicate predicate, between_predicate, comparison_predicate,
  compound_predicate, in_predicate, like_predicate, exists_predicate;
nonterminal ObjectSyntaxBlock<ArrayList<Expr>> group_by_clause, opt_partition_by_clause;
nonterminal Expr having_clause;
nonterminal ObjectSyntaxBlock<ArrayList<OrderByElement>> order_by_elements, opt_order_by_clause;
nonterminal OrderByElement order_by_element;
nonterminal ObjectSyntaxBlock<Boolean> opt_order_param;
nonterminal ObjectSyntaxBlock<Boolean> opt_nulls_order_param;
nonterminal Expr opt_offset_param;
nonterminal LimitElement opt_limit_offset_clause;
nonterminal Expr opt_limit_clause, opt_offset_clause;
nonterminal Expr cast_expr, case_else_clause, analytic_expr;
nonterminal Expr function_call_expr;
nonterminal AnalyticWindow opt_window_clause;
nonterminal ObjectSyntaxBlock<AnalyticWindow.Type> window_type;
nonterminal AnalyticWindow.Boundary window_boundary;
nonterminal LiteralExpr literal;
nonterminal CaseExpr case_expr;
nonterminal ObjectSyntaxBlock<ArrayList<CaseWhenClause>> case_when_clause_list;
nonterminal FunctionParams function_params;
nonterminal ObjectSyntaxBlock<ArrayList<String>> dotted_path;
nonterminal SlotRef slot_ref;
nonterminal FromClause from_clause;
nonterminal ObjectSyntaxBlock<ArrayList<TableRef>> table_ref_list;
nonterminal WithClause opt_with_clause;
nonterminal ObjectSyntaxBlock<ArrayList<View>> with_view_def_list;
nonterminal ObjectSyntaxBlock<View> with_view_def;
nonterminal TableRef table_ref;
nonterminal Subquery subquery;
nonterminal ObjectSyntaxBlock<JoinOperator> join_operator;
nonterminal opt_inner, opt_outer;
nonterminal ObjectSyntaxBlock<ArrayList<String>> opt_plan_hints;
nonterminal TypeDef type_def;
nonterminal ObjectSyntaxBlock<Type> type;
nonterminal Expr sign_chain_expr;
nonterminal InsertStmt insert_stmt, upsert_stmt;
nonterminal UpdateStmt update_stmt;
nonterminal DeleteStmt delete_stmt;
nonterminal ObjectSyntaxBlock<ArrayList<Pair<SlotRef, Expr>>> update_set_expr_list;
nonterminal StatementBase explain_stmt;
// Optional partition spec
nonterminal PartitionSpec opt_partition_spec;
// Required partition spec
nonterminal PartitionSpec partition_spec;
// Optional partition set
nonterminal PartitionSet opt_partition_set;
// Required partition set
nonterminal PartitionSet partition_set;
nonterminal ObjectSyntaxBlock<ArrayList<PartitionKeyValue>> partition_clause;
nonterminal ObjectSyntaxBlock<ArrayList<PartitionKeyValue>> static_partition_key_value_list;
nonterminal ObjectSyntaxBlock<ArrayList<PartitionKeyValue>> partition_key_value_list;
nonterminal PartitionKeyValue partition_key_value;
nonterminal PartitionKeyValue static_partition_key_value;
nonterminal ObjectSyntaxBlock<Qualifier> union_op;

nonterminal AlterTableStmt alter_tbl_stmt;
nonterminal StatementBase alter_view_stmt;
nonterminal ComputeStatsStmt compute_stats_stmt;
nonterminal DropDbStmt drop_db_stmt;
nonterminal DropStatsStmt drop_stats_stmt;
nonterminal DropTableOrViewStmt drop_tbl_or_view_stmt;
nonterminal CreateDbStmt create_db_stmt;
nonterminal CreateTableAsSelectStmt create_tbl_as_select_stmt;
nonterminal CreateTableLikeStmt create_tbl_like_stmt;
nonterminal CreateTableStmt create_tbl_stmt;
nonterminal TableDef tbl_def_without_col_defs, tbl_def_with_col_defs;
nonterminal TableDataLayout opt_tbl_data_layout, partitioned_data_layout;
nonterminal TableDef.Options tbl_options;
nonterminal CreateViewStmt create_view_stmt;
nonterminal CreateDataSrcStmt create_data_src_stmt;
nonterminal DropDataSrcStmt drop_data_src_stmt;
nonterminal ShowDataSrcsStmt show_data_srcs_stmt;
nonterminal ObjectSyntaxBlock<StructField> struct_field_def;
nonterminal KuduPartitionParam hash_partition_param;
nonterminal ObjectSyntaxBlock<List<RangePartition>> range_params_list;
nonterminal RangePartition range_param;
nonterminal ObjectSyntaxBlock<Pair<Expr, Boolean>> opt_lower_range_val,
   opt_upper_range_val;
nonterminal ObjectSyntaxBlock<ArrayList<KuduPartitionParam>> hash_partition_param_list;
nonterminal ObjectSyntaxBlock<ArrayList<KuduPartitionParam>> partition_param_list;
nonterminal KuduPartitionParam range_partition_param;
nonterminal ColumnDef column_def, view_column_def;
nonterminal ObjectSyntaxBlock<ArrayList<ColumnDef>> column_def_list, partition_column_defs,
  view_column_def_list, view_column_defs;
nonterminal ObjectSyntaxBlock<ArrayList<StructField>> struct_field_def_list;
// Options for DDL commands - CREATE/DROP/ALTER
nonterminal HdfsCachingOp cache_op_val;
nonterminal ObjectSyntaxBlock<BigDecimal> opt_cache_op_replication;
nonterminal ObjectSyntaxBlock<String> comment_val, opt_comment_val;
nonterminal ObjectSyntaxBlock<Boolean> external_val;
nonterminal ObjectSyntaxBlock<Boolean> purge_val;
nonterminal ObjectSyntaxBlock<String> opt_init_string_val;
nonterminal ObjectSyntaxBlock<THdfsFileFormat> file_format_val;
nonterminal ObjectSyntaxBlock<THdfsFileFormat> file_format_create_table_val;
nonterminal ObjectSyntaxBlock<Boolean> if_exists_val;
nonterminal ObjectSyntaxBlock<Boolean> if_not_exists_val;
nonterminal ObjectSyntaxBlock<Boolean> is_primary_key_val;
nonterminal ObjectSyntaxBlock<Boolean> replace_existing_cols_val;
nonterminal HdfsUri location_val;
nonterminal ObjectSyntaxBlock<RowFormat> row_format_val;
nonterminal ObjectSyntaxBlock<String> field_terminator_val;
nonterminal ObjectSyntaxBlock<String> line_terminator_val;
nonterminal ObjectSyntaxBlock<String> escaped_by_val;
nonterminal ObjectSyntaxBlock<String> terminator_val;
nonterminal ObjectSyntaxBlock<TTablePropertyType> table_property_type;
nonterminal ObjectSyntaxBlock<HashMap> serde_properties;
nonterminal ObjectSyntaxBlock<HashMap> tbl_properties;
nonterminal ObjectSyntaxBlock<HashMap> properties_map;
// Used to simplify commands that accept either KW_DATABASE(S) or KW_SCHEMA(S)
nonterminal ObjectSyntaxBlock<String> db_or_schema_kw;
nonterminal ObjectSyntaxBlock<String> dbs_or_schemas_kw;
// Used to simplify commands where KW_COLUMN is optional
nonterminal ObjectSyntaxBlock<String> opt_kw_column;
// Used to simplify commands where KW_TABLE is optional
nonterminal ObjectSyntaxBlock<String> opt_kw_table;
nonterminal ObjectSyntaxBlock<Boolean> overwrite_val;
nonterminal ObjectSyntaxBlock<Boolean> cascade_val;
nonterminal ObjectSyntaxBlock<Boolean> nullability_val;
nonterminal ObjectSyntaxBlock<String> encoding_val;
nonterminal ObjectSyntaxBlock<String> compression_val;
nonterminal Expr default_val;
nonterminal LiteralExpr block_size_val;
nonterminal ObjectSyntaxBlock<Pair<Option, Object>> column_option;
nonterminal ObjectSyntaxBlock<Map<Option, Object>> column_options_map;

// For GRANT/REVOKE/AUTH DDL statements
nonterminal ShowRolesStmt show_roles_stmt;
nonterminal ShowGrantRoleStmt show_grant_role_stmt;
nonterminal CreateDropRoleStmt create_drop_role_stmt;
nonterminal GrantRevokeRoleStmt grant_role_stmt;
nonterminal GrantRevokeRoleStmt revoke_role_stmt;
nonterminal GrantRevokePrivStmt grant_privilege_stmt;
nonterminal GrantRevokePrivStmt revoke_privilege_stmt;
nonterminal PrivilegeSpec privilege_spec;
nonterminal ObjectSyntaxBlock<TPrivilegeLevel> privilege;
nonterminal ObjectSyntaxBlock<Boolean> opt_with_grantopt;
nonterminal ObjectSyntaxBlock<Boolean> opt_grantopt_for;
nonterminal ObjectSyntaxBlock<Boolean> opt_kw_role;

// To avoid creating common keywords such as 'SERVER' or 'SOURCES' we treat them as
// identifiers rather than keywords. Throws a parse exception if the identifier does not
// match the expected string.
nonterminal key_ident;
nonterminal ObjectSyntaxBlock<Boolean> option_ident;
nonterminal ObjectSyntaxBlock<Boolean> server_ident;
nonterminal ObjectSyntaxBlock<Boolean> source_ident;
nonterminal ObjectSyntaxBlock<Boolean> sources_ident;
nonterminal ObjectSyntaxBlock<Boolean> uri_ident;

// For Create/Drop/Show function ddl
nonterminal FunctionArgs function_def_args;
nonterminal FunctionArgs function_def_arg_list;
// Accepts space separated key='v' arguments.
nonterminal ObjectSyntaxBlock<HashMap> function_def_args_map;
nonterminal ObjectSyntaxBlock<CreateFunctionStmtBase.OptArg> function_def_arg_key;
nonterminal ObjectSyntaxBlock<Boolean> opt_is_aggregate_fn;
nonterminal ObjectSyntaxBlock<Boolean> opt_is_varargs;
nonterminal TypeDef opt_aggregate_fn_intermediate_type_def;
nonterminal CreateUdfStmt create_udf_stmt;
nonterminal CreateUdaStmt create_uda_stmt;
nonterminal ShowFunctionsStmt show_functions_stmt;
nonterminal DropFunctionStmt drop_function_stmt;
nonterminal ObjectSyntaxBlock<TFunctionCategory> opt_function_category;

precedence left KW_OR;
precedence left KW_AND;
precedence right KW_NOT, NOT;
precedence left KW_DEFAULT;
precedence left KW_BETWEEN, KW_IN, KW_IS, KW_EXISTS;
precedence left KW_LIKE, KW_RLIKE, KW_ILIKE, KW_REGEXP, KW_IREGEXP;
precedence left EQUAL, NOTEQUAL, LESSTHAN, GREATERTHAN, KW_FROM, KW_DISTINCT;
precedence left ADD, SUBTRACT;
precedence left STAR, DIVIDE, MOD, KW_DIV;
precedence left BITAND, BITOR, BITXOR, BITNOT;
precedence left FACTORIAL;
precedence left KW_ORDER, KW_BY, KW_LIMIT;
precedence left LPAREN, RPAREN;
precedence left KW_VALUES;
// Support chaining of timestamp arithmetic exprs.
precedence left KW_INTERVAL;
precedence left KW_TBLPROPERTIES;

// These tokens need to be at the end for function_def_args_map to accept
// no keys. Otherwise, the grammar has shift/reduce conflicts.
precedence left KW_COMMENT;
precedence left KW_SYMBOL;
precedence left KW_PREPARE_FN;
precedence left KW_CLOSE_FN;
precedence left KW_UPDATE_FN;
precedence left KW_FINALIZE_FN;
precedence left KW_INIT_FN;
precedence left KW_MERGE_FN;
precedence left KW_SERIALIZE_FN;

precedence left KW_OVER;

start with stmt;

stmt ::=
  query_stmt:query
  {: RESULT = query; :}
  | insert_stmt:insert
  {: RESULT = insert; :}
  | update_stmt:update
  {: RESULT = update; :}
  | upsert_stmt:upsert
  {: RESULT = upsert; :}
  | delete_stmt:delete
  {: RESULT = delete; :}
  | use_stmt:use
  {: RESULT = use; :}
  | show_tables_stmt:show_tables
  {: RESULT = show_tables; :}
  | show_dbs_stmt:show_dbs
  {: RESULT = show_dbs; :}
  | show_partitions_stmt:show_partitions
  {: RESULT = show_partitions; :}
  | show_range_partitions_stmt:show_range_partitions
  {: RESULT = show_range_partitions; :}
  | show_stats_stmt:show_stats
  {: RESULT = show_stats; :}
  | show_functions_stmt:show_functions
  {: RESULT = show_functions; :}
  | show_data_srcs_stmt:show_data_srcs
  {: RESULT = show_data_srcs; :}
  | show_create_tbl_stmt:show_create_tbl
  {: RESULT = show_create_tbl; :}
  | show_create_function_stmt:show_create_function
  {: RESULT = show_create_function; :}
  | show_files_stmt:show_files
  {: RESULT = show_files; :}
  | describe_db_stmt:describe
  {: RESULT = describe; :}
  | describe_table_stmt:describe
  {: RESULT = describe; :}
  | alter_tbl_stmt:alter_tbl
  {: RESULT = alter_tbl; :}
  | alter_view_stmt:alter_view
  {: RESULT = alter_view; :}
  | compute_stats_stmt:compute_stats
  {: RESULT = compute_stats; :}
  | drop_stats_stmt:drop_stats
  {: RESULT = drop_stats; :}
  | create_tbl_as_select_stmt:create_tbl_as_select
  {: RESULT = create_tbl_as_select; :}
  | create_tbl_like_stmt:create_tbl_like
  {: RESULT = create_tbl_like; :}
  | create_tbl_stmt:create_tbl
  {: RESULT = create_tbl; :}
  | create_view_stmt:create_view
  {: RESULT = create_view; :}
  | create_data_src_stmt:create_data_src
  {: RESULT = create_data_src; :}
  | create_db_stmt:create_db
  {: RESULT = create_db; :}
  | create_udf_stmt:create_udf
  {: RESULT = create_udf; :}
  | create_uda_stmt:create_uda
  {: RESULT = create_uda; :}
  | drop_db_stmt:drop_db
  {: RESULT = drop_db; :}
  | drop_tbl_or_view_stmt:drop_tbl
  {: RESULT = drop_tbl; :}
  | drop_function_stmt:drop_function
  {: RESULT = drop_function; :}
  | drop_data_src_stmt:drop_data_src
  {: RESULT = drop_data_src; :}
  | explain_stmt:explain
  {: RESULT = explain; :}
  | load_stmt: load
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = load;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | truncate_stmt: truncate
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = truncate;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | reset_metadata_stmt: reset_metadata
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = reset_metadata;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | set_stmt:set
  {: RESULT = set; :}
  | show_roles_stmt:show_roles
  {: RESULT = show_roles; :}
  | show_grant_role_stmt:show_grant_role
  {: RESULT = show_grant_role; :}
  | create_drop_role_stmt:create_drop_role
  {: RESULT = create_drop_role; :}
  | grant_role_stmt:grant_role
  {: RESULT = grant_role; :}
  | revoke_role_stmt:revoke_role
  {: RESULT = revoke_role; :}
  | grant_privilege_stmt:grant_privilege
  {: RESULT = grant_privilege; :}
  | revoke_privilege_stmt:revoke_privilege
  {: RESULT = revoke_privilege; :}
  | stmt:s SEMICOLON
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = s;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

load_stmt ::=
  KW_LOAD KW_DATA KW_INPATH STRING_LITERAL:path overwrite_val:overwrite KW_INTO KW_TABLE
  table_name:table opt_partition_spec:partition
  {:
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    HdfsUri uri = new HdfsUri(path);
    uri.startPosition = _5_symbol.start;
    uri.endPosition = _5_symbol.end;
    uri.objectValue = path;

    RESULT = new LoadDataStmt(table, uri, overwrite.objectValue, partition);
    RESULT.startPosition = _8_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_8_symbol),
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

truncate_stmt ::=
  KW_TRUNCATE KW_TABLE if_exists_val:if_exists table_name:tbl_name
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new TruncateStmt(tbl_name, if_exists.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_TRUNCATE if_exists_val:if_exists table_name:tbl_name
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new TruncateStmt(tbl_name, if_exists.objectValue);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

overwrite_val ::=
  KW_OVERWRITE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, Boolean.TRUE);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(Boolean.FALSE);
  :}
  ;

reset_metadata_stmt ::=
  KW_INVALIDATE KW_METADATA
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ResetMetadataStmt(null, false, null);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_INVALIDATE KW_METADATA table_name:table
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ResetMetadataStmt(table, false, null);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_REFRESH table_name:table
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ResetMetadataStmt(table, true, null);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_REFRESH table_name:table partition_spec:partition
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ResetMetadataStmt(table, true, partition);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

explain_stmt ::=
  KW_EXPLAIN query_stmt:query
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    query.setIsExplain();
    RESULT = query;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | KW_EXPLAIN insert_stmt:insert
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    insert.setIsExplain();
    RESULT = insert;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | KW_EXPLAIN create_tbl_as_select_stmt:ctas_stmt
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ctas_stmt.setIsExplain();
    RESULT = ctas_stmt;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | KW_EXPLAIN update_stmt:update
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    update.setIsExplain();
    RESULT = update;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | KW_EXPLAIN upsert_stmt:upsert
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    upsert.setIsExplain();
    RESULT = upsert;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | KW_EXPLAIN delete_stmt:delete
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    delete.setIsExplain();

    RESULT = delete;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  ;

// Insert statements have two optional clauses: the column permutation (INSERT into
// tbl(col1,...) etc) and the PARTITION clause. If the column permutation is present, the
// query statement clause is optional as well.
insert_stmt ::=
  opt_with_clause:w KW_INSERT KW_OVERWRITE opt_kw_table table_name:table
  LPAREN opt_ident_list:col_perm RPAREN partition_clause:list opt_plan_hints:hints
  opt_query_stmt:query
  {:
    ExtendSymbol _10_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 10);
    ExtendSymbol _9_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 9);
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = InsertStmt.createInsert(w, table, true,
        list != null ? list.objectValue : null,
        hints != null ? hints.objectValue: null, query, col_perm.objectValue);
    RESULT.startPosition = _10_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_10_symbol),
        ObjectSyntaxBlock.valueOf(_9_symbol),
        ObjectSyntaxBlock.valueOf(_8_symbol),
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | opt_with_clause:w KW_INSERT KW_OVERWRITE
  opt_kw_table table_name:table
  partition_clause:list opt_plan_hints:hints query_stmt:query
  {:
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = InsertStmt.createInsert(w, table, true,
        list != null ? list.objectValue : null,
        hints != null ? hints.objectValue: null, query, null);
    RESULT.startPosition = _7_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | opt_with_clause:w KW_INSERT KW_INTO opt_kw_table table_name:table
  LPAREN opt_ident_list:col_perm RPAREN
  partition_clause:list opt_plan_hints:hints opt_query_stmt:query
  {:
    ExtendSymbol _10_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 10);
    ExtendSymbol _9_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 9);
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = InsertStmt.createInsert(w, table, false,
        list != null ? list.objectValue : null,
        hints != null ? hints.objectValue: null, query, col_perm.objectValue);
    RESULT.startPosition = _10_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_10_symbol),
        ObjectSyntaxBlock.valueOf(_9_symbol),
        ObjectSyntaxBlock.valueOf(_8_symbol),
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | opt_with_clause:w KW_INSERT KW_INTO opt_kw_table table_name:table
  partition_clause:list opt_plan_hints:hints query_stmt:query
  {:
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = InsertStmt.createInsert(w, table, false,
        list != null ? list.objectValue : null,
        hints != null ? hints.objectValue: null, query, null);
    RESULT.startPosition = _7_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

// Update statements have an optional WHERE and optional FROM clause.
update_stmt ::=
  KW_UPDATE dotted_path:target_table KW_SET update_set_expr_list:values
  where_clause:where_predicate
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    TableRef tableRef = new TableRef(target_table.objectValue, null);
    tableRef.startPosition = _3_symbol.start;
    tableRef.endPosition = _3_symbol.end;
    tableRef.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol)
    );

    FromClause from_clause = new FromClause(Lists.newArrayList(tableRef));
    from_clause.startPosition = _3_symbol.start;
    from_clause.endPosition = _3_symbol.end;
    from_clause.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol)
    );

    RESULT = new UpdateStmt(target_table.objectValue, from_clause, values.objectValue, where_predicate);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_UPDATE dotted_path:target_table
  KW_SET update_set_expr_list:values
    from_clause:tables where_clause:where_predicate
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new UpdateStmt(target_table.objectValue, tables, values.objectValue, where_predicate);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

update_set_expr_list ::=
  slot_ref:slot EQUAL expr:e
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<Pair<SlotRef, Expr>> tmp =
        Lists.newArrayList(new Pair<SlotRef, Expr>(slot, e));
    RESULT = new ObjectSyntaxBlock<ArrayList<Pair<SlotRef, Expr>>>(_2_symbol.start, _0_symbol.end, tmp);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | update_set_expr_list:list COMMA slot_ref:slot EQUAL expr:e
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(new Pair(slot, e));
    RESULT = list;
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

// Upsert statements have an optional column permutation clause. If the column permutation
// is present, the query statement clause is optional as well.
upsert_stmt ::=
  opt_with_clause:w KW_UPSERT KW_INTO opt_kw_table table_name:table
    LPAREN opt_ident_list:col_perm RPAREN opt_plan_hints:hints opt_query_stmt:query
  {:
    ExtendSymbol _9_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 9);
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = InsertStmt.createUpsert(w, table,
        hints != null ? hints.objectValue: null, query, col_perm.objectValue);
    RESULT.startPosition = _9_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_9_symbol),
        ObjectSyntaxBlock.valueOf(_8_symbol),
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | opt_with_clause:w KW_UPSERT KW_INTO opt_kw_table table_name:table
    opt_plan_hints:hints query_stmt:query
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = InsertStmt.createUpsert(w, table,
        hints != null ? hints.objectValue: null, query, null);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

// A DELETE statement comes in two main representations, the DELETE keyword with a path
// specification as the target table with an optional FROM keyword or the DELETE
// keyword followed by a table alias or reference and a full FROM clause. In all cases
// a WHERE clause may be present.
delete_stmt ::=
  KW_DELETE dotted_path:target_table  where_clause:where
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    TableRef tableRef = new TableRef(target_table.objectValue, null);
    tableRef.startPosition = _1_symbol.start;
    tableRef.endPosition = _1_symbol.end;
    tableRef.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol)
    );

    FromClause from_clause = new FromClause(Lists.newArrayList(tableRef));
    from_clause.startPosition = _1_symbol.start;
    from_clause.endPosition = _1_symbol.end;
    from_clause.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol)
    );

    RESULT = new DeleteStmt(target_table.objectValue, from_clause, where);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_DELETE KW_FROM dotted_path:target_table  where_clause:where
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    TableRef tableRef = new TableRef(target_table.objectValue, null);
    tableRef.startPosition = _1_symbol.start;
    tableRef.endPosition = _1_symbol.end;
    tableRef.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol)
    );

    FromClause from_clause = new FromClause(Lists.newArrayList(tableRef));
    from_clause.startPosition = _1_symbol.start;
    from_clause.endPosition = _1_symbol.end;
    from_clause.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol)
    );

    RESULT = new DeleteStmt(target_table.objectValue, from_clause, where);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_DELETE dotted_path:target_table from_clause:from
  where_clause:where
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DeleteStmt(target_table.objectValue, from, where);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_query_stmt ::=
  query_stmt:query
  {: RESULT = query; :}
  | /* empty */
  {: RESULT = null; :}
  ;

opt_ident_list ::=
  ident_list:ident
  {: RESULT = ident; :}
  | /* empty */
  {:
    RESULT = new ObjectSyntaxBlock<ArrayList<String>>(Lists.<String>newArrayList());
  :}
  ;

opt_kw_table ::=
  KW_TABLE
  | /* empty */
  ;

show_roles_stmt ::=
  KW_SHOW KW_ROLES
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowRolesStmt(false, null);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_ROLE KW_GRANT KW_GROUP ident_or_default:group
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowRolesStmt(false, group.objectValue);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_CURRENT KW_ROLES
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowRolesStmt(true, null);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_grant_role_stmt ::=
  KW_SHOW KW_GRANT KW_ROLE ident_or_default:role
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowGrantRoleStmt(role.objectValue, null);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_GRANT KW_ROLE ident_or_default:role KW_ON server_ident:server_kw
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    PrivilegeSpec privilegeSpec = PrivilegeSpec.createServerScopedPriv(TPrivilegeLevel.ALL);
    privilegeSpec.startPosition = _0_symbol.start;
    privilegeSpec.endPosition = _0_symbol.end;

    RESULT = new ShowGrantRoleStmt(role.objectValue, privilegeSpec);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_GRANT KW_ROLE ident_or_default:role KW_ON
    KW_DATABASE ident_or_default:db_name
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    PrivilegeSpec privilegeSpec = PrivilegeSpec.createDbScopedPriv(TPrivilegeLevel.ALL, db_name.objectValue);
    privilegeSpec.startPosition = _0_symbol.start;
    privilegeSpec.endPosition = _0_symbol.end;
    privilegeSpec.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );

    RESULT = new ShowGrantRoleStmt(role.objectValue, privilegeSpec);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_GRANT KW_ROLE ident_or_default:role KW_ON KW_TABLE table_name:tbl_name
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    PrivilegeSpec privilegeSpec = PrivilegeSpec.createTableScopedPriv(TPrivilegeLevel.ALL, tbl_name);
    privilegeSpec.startPosition = _0_symbol.start;
    privilegeSpec.endPosition = _0_symbol.end;
    privilegeSpec.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );

    RESULT = new ShowGrantRoleStmt(role.objectValue, privilegeSpec);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_GRANT KW_ROLE ident_or_default:role KW_ON uri_ident:uri_kw
    STRING_LITERAL:uri
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    HdfsUri hdfsUri = new HdfsUri(uri);
    hdfsUri.startPosition = _0_symbol.start;
    hdfsUri.endPosition = _0_symbol.end;
    hdfsUri.objectValue = uri;

    PrivilegeSpec privilegeSpec = PrivilegeSpec.createUriScopedPriv(TPrivilegeLevel.ALL, hdfsUri);
    privilegeSpec.startPosition = _0_symbol.start;
    privilegeSpec.endPosition = _0_symbol.end;
    privilegeSpec.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );

    RESULT = new ShowGrantRoleStmt(role.objectValue, privilegeSpec);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

create_drop_role_stmt ::=
  KW_CREATE KW_ROLE ident_or_default:role
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CreateDropRoleStmt(role.objectValue, false);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_DROP KW_ROLE ident_or_default:role
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CreateDropRoleStmt(role.objectValue, true);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

grant_role_stmt ::=
  KW_GRANT KW_ROLE ident_or_default:role KW_TO KW_GROUP ident_or_default:group
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new GrantRevokeRoleStmt(role.objectValue, group.objectValue, true);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

revoke_role_stmt ::=
  KW_REVOKE KW_ROLE ident_or_default:role KW_FROM KW_GROUP ident_or_default:group
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new GrantRevokeRoleStmt(role.objectValue, group.objectValue, false);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

grant_privilege_stmt ::=
  KW_GRANT privilege_spec:priv KW_TO opt_kw_role:opt_role ident_or_default:role
  opt_with_grantopt:grant_opt
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new GrantRevokePrivStmt(role.objectValue, priv, true, grant_opt.objectValue);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

revoke_privilege_stmt ::=
  KW_REVOKE opt_grantopt_for:grant_opt privilege_spec:priv KW_FROM
  opt_kw_role:opt_role ident_or_default:role
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new GrantRevokePrivStmt(role.objectValue, priv, false, grant_opt.objectValue);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

privilege_spec ::=
  privilege:priv KW_ON server_ident:server_kw
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = PrivilegeSpec.createServerScopedPriv(priv.objectValue);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | privilege:priv KW_ON server_ident:server_kw ident_or_default:server_name
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = PrivilegeSpec.createServerScopedPriv(priv.objectValue, server_name.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | privilege:priv KW_ON KW_DATABASE ident_or_default:db_name
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = PrivilegeSpec.createDbScopedPriv(priv.objectValue, db_name.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | privilege:priv KW_ON KW_TABLE table_name:tbl_name
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = PrivilegeSpec.createTableScopedPriv(priv.objectValue, tbl_name);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | privilege:priv LPAREN opt_ident_list:cols RPAREN KW_ON KW_TABLE table_name:tbl_name
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = PrivilegeSpec.createColumnScopedPriv(priv.objectValue, tbl_name, cols.objectValue);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | privilege:priv KW_ON uri_ident:uri_kw STRING_LITERAL:uri
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    HdfsUri hdfsUri = new HdfsUri(uri);
    hdfsUri.startPosition = _0_symbol.start;
    hdfsUri.endPosition = _0_symbol.end;
    hdfsUri.objectValue = uri;

    RESULT = PrivilegeSpec.createUriScopedPriv(priv.objectValue, hdfsUri);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

privilege ::=
  KW_SELECT
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TPrivilegeLevel>(_0_symbol.start, _0_symbol.end, TPrivilegeLevel.SELECT);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_INSERT
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TPrivilegeLevel>(_0_symbol.start, _0_symbol.end, TPrivilegeLevel.INSERT);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALL
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TPrivilegeLevel>(_0_symbol.start, _0_symbol.end, TPrivilegeLevel.ALL);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_grantopt_for ::=
  KW_GRANT option_ident:option KW_FOR
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_2_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(false);
  :}
  ;

opt_with_grantopt ::=
  KW_WITH KW_GRANT option_ident:option
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_2_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(false);
  :}
  ;

opt_kw_role ::=
  KW_ROLE
  | /* empty */
  ;

alter_tbl_stmt ::=
  KW_ALTER KW_TABLE table_name:table replace_existing_cols_val:replace KW_COLUMNS
  LPAREN column_def_list:col_defs RPAREN
  {:
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableAddReplaceColsStmt(table, col_defs.objectValue, replace.objectValue);
    RESULT.startPosition = _7_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table KW_ADD if_not_exists_val:if_not_exists
    partition_spec:partition location_val:location cache_op_val:cache_op
  {:
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableAddPartitionStmt(table, partition,
        location, if_not_exists.objectValue, cache_op);
    RESULT.startPosition = _7_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table KW_DROP opt_kw_column ident_or_default:col_name
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableDropColStmt(table, col_name.objectValue);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table KW_ADD if_not_exists_val:if_not_exists
    KW_RANGE range_param:partition
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableAddDropRangePartitionStmt(table, partition, if_not_exists.objectValue,
        Operation.ADD);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table KW_CHANGE opt_kw_column ident_or_default:col_name
    column_def:col_def
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableChangeColStmt(table, col_name.objectValue, col_def);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table KW_DROP if_exists_val:if_exists
    partition_set:partitions purge_val:purge
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableDropPartitionStmt(table, partitions, if_exists.objectValue, purge.objectValue);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table opt_partition_set:partitions KW_SET KW_FILEFORMAT
    file_format_val:file_format
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableSetFileFormatStmt(table, partitions, file_format.objectValue);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table KW_DROP if_exists_val:if_exists
    KW_RANGE range_param:partition
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableAddDropRangePartitionStmt(table, partition, if_exists.objectValue,
        Operation.DROP);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table opt_partition_set:partitions KW_SET
    KW_LOCATION STRING_LITERAL:location
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    // Need to check in analysis that the partition set only matches a single partition.
    // Avoids a reduce/reduce conflict and allows the user to select a partition without
    // fully specifying all partition-key values.
    HdfsUri hdfsUri = new HdfsUri(location);
    hdfsUri.startPosition = _0_symbol.start;
    hdfsUri.endPosition = _0_symbol.end;
    hdfsUri.objectValue = location;

    RESULT = new AlterTableSetLocationStmt(table, partitions, hdfsUri);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table KW_RENAME KW_TO table_name:new_table
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableOrViewRenameStmt(table, new_table, true);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table opt_partition_set:partitions KW_SET
    table_property_type:target LPAREN properties_map:properties RPAREN
  {:
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableSetTblProperties(table, partitions, target.objectValue, properties.objectValue);
    RESULT.startPosition = _8_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_8_symbol),
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table opt_partition_set:partition KW_SET
    KW_COLUMN KW_STATS ident_or_default:col LPAREN properties_map:map RPAREN
  {:
    ExtendSymbol _10_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 10);
    ExtendSymbol _9_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 9);
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    // The opt_partition_set is used to avoid conflicts even though
    // a partition clause does not make sense for this stmt. If a partition
    // is given, manually throw a parse error.
    if (partition != null) parser.parseError("set", SqlParserSymbols.KW_SET);
    RESULT = new AlterTableSetColumnStats(table, col.objectValue, map.objectValue);
    RESULT.startPosition = _10_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_10_symbol),
        ObjectSyntaxBlock.valueOf(_9_symbol),
        ObjectSyntaxBlock.valueOf(_8_symbol),
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table opt_partition_set:partitions KW_SET
    cache_op_val:cache_op
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    // Ensure a parser error is thrown for ALTER statements if no cache op is specified.
    if (cache_op == null) parser.parseError("set", SqlParserSymbols.KW_SET);
    RESULT = new AlterTableSetCachedStmt(table, partitions, cache_op);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_TABLE table_name:table KW_RECOVER KW_PARTITIONS
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableRecoverPartitionsStmt(table);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

table_property_type ::=
  KW_TBLPROPERTIES
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TTablePropertyType>(_0_symbol.start, _0_symbol.end, TTablePropertyType.TBL_PROPERTY);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SERDEPROPERTIES
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TTablePropertyType>(_0_symbol.start, _0_symbol.end, TTablePropertyType.SERDE_PROPERTY);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_kw_column ::=
  KW_COLUMN
  | /* empty */
  ;

replace_existing_cols_val ::=
  KW_REPLACE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ADD
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, false);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

create_db_stmt ::=
  KW_CREATE db_or_schema_kw if_not_exists_val:if_not_exists ident_or_default:db_name
  opt_comment_val:comment location_val:location
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CreateDbStmt(db_name.objectValue,
        comment != null ? comment.objectValue : null, location, if_not_exists.objectValue);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

create_tbl_as_select_stmt ::=
  tbl_def_without_col_defs:tbl_def
  tbl_options:options
  KW_AS query_stmt:select_stmt
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    tbl_def.setOptions(options);
    CreateTableStmt createTableStmt = new CreateTableStmt(tbl_def);
    createTableStmt.startPosition = _3_symbol.start;
    createTableStmt.endPosition = _3_symbol.end;
    createTableStmt.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol)
    );

    RESULT = new CreateTableAsSelectStmt(createTableStmt, select_stmt, null);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | tbl_def_without_col_defs:tbl_def
    // An optional clause cannot be used directly below because it would conflict with
    // the first rule in "create_tbl_stmt".
    primary_keys:primary_keys
    partitioned_data_layout:partition_params
    tbl_options:options
    KW_AS query_stmt:select_stmt
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    tbl_def.getPrimaryKeyColumnNames().addAll(primary_keys.objectValue);
    tbl_def.getKuduPartitionParams().addAll(partition_params.getKuduPartitionParams());
    tbl_def.setOptions(options);

    CreateTableStmt createTableStmt = new CreateTableStmt(tbl_def);
    createTableStmt.startPosition = _5_symbol.start;
    createTableStmt.endPosition = _5_symbol.end;
    createTableStmt.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol)
    );

    RESULT = new CreateTableAsSelectStmt(createTableStmt, select_stmt, null);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | tbl_def_without_col_defs:tbl_def
    KW_PARTITIONED KW_BY LPAREN ident_list:partition_cols RPAREN
    tbl_options:options
    KW_AS query_stmt:select_stmt
  {:
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    tbl_def.setOptions(options);
    CreateTableStmt createTableStmt = new CreateTableStmt(tbl_def);
    createTableStmt.startPosition = _8_symbol.start;
    createTableStmt.endPosition = _8_symbol.end;
    createTableStmt.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_8_symbol)
    );

    RESULT = new CreateTableAsSelectStmt(createTableStmt, select_stmt, partition_cols.objectValue);
    RESULT.startPosition = _8_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_8_symbol),
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

create_tbl_stmt ::=
  tbl_def_without_col_defs:tbl_def
  tbl_options:options
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    tbl_def.setOptions(options);
    RESULT = new CreateTableStmt(tbl_def);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | tbl_def_without_col_defs:tbl_def
    // If "opt_tbl_data_layout" were used instead so that this rule could be combined with
    // the rule above, there would be a conflict with the first rule in
    // "create_tbl_as_select_stmt".
    partition_column_defs:partition_column_defs
    tbl_options:options
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    tbl_def.setOptions(options);
    CreateTableStmt create_tbl_stmt = new CreateTableStmt(tbl_def);
    create_tbl_stmt.getPartitionColumnDefs().addAll(partition_column_defs.objectValue);
    RESULT = create_tbl_stmt;
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | tbl_def_with_col_defs:tbl_def
    opt_tbl_data_layout:data_layout
    tbl_options:options
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    tbl_def.getPartitionColumnDefs().addAll(data_layout.getPartitionColumnDefs());
    tbl_def.getKuduPartitionParams().addAll(data_layout.getKuduPartitionParams());
    tbl_def.setOptions(options);
    RESULT = new CreateTableStmt(tbl_def);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | tbl_def_with_col_defs:tbl_def
    KW_PRODUCED KW_BY KW_DATA source_ident:is_source_id ident_or_default:data_src_name
    opt_init_string_val:init_string
    opt_comment_val:comment
  {:
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    // Need external_val in the grammar to avoid shift/reduce conflict with other
    // CREATE TABLE statements.
    if (tbl_def.isExternal()) {
      parser.parseError("external", SqlParserSymbols.KW_EXTERNAL);
    }
    TableDef.Options options = new TableDef.Options(comment != null ? comment.objectValue : null);
    options.startPosition = _0_symbol.start;
    options.endPosition = _0_symbol.end;
    options.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );

    tbl_def.setOptions(options);
    CreateTableStmt createTableStmt = new CreateTableStmt(tbl_def);
    createTableStmt.startPosition = _7_symbol.start;
    createTableStmt.endPosition = _7_symbol.end;
    createTableStmt.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_7_symbol)
    );

    RESULT = new CreateTableDataSrcStmt(createTableStmt, data_src_name.objectValue,
        init_string != null ? init_string.objectValue : null);
    RESULT.startPosition = _7_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | tbl_def_without_col_defs:tbl_def
    KW_LIKE file_format_val:schema_file_format
    STRING_LITERAL:schema_location
    opt_tbl_data_layout:data_layout
    tbl_options:options
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    tbl_def.getPartitionColumnDefs().addAll(data_layout.getPartitionColumnDefs());
    tbl_def.getKuduPartitionParams().addAll(data_layout.getKuduPartitionParams());
    tbl_def.setOptions(options);

    CreateTableStmt createTableStmt = new CreateTableStmt(tbl_def);
    createTableStmt.startPosition = _5_symbol.start;
    createTableStmt.endPosition = _5_symbol.end;
    createTableStmt.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol)
    );

    HdfsUri hdfsUri = new HdfsUri(schema_location);
    hdfsUri.startPosition = _2_symbol.start;
    hdfsUri.endPosition = _2_symbol.end;
    hdfsUri.objectValue = schema_location;

    RESULT = new CreateTableLikeFileStmt(createTableStmt, schema_file_format.objectValue, hdfsUri);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

// The form of CREATE TABLE below should logically be grouped with the forms above but
// 'create_tbl_stmt' must return a CreateTableStmt instance and CreateTableLikeFileStmt
// class doesn't inherit from CreateTableStmt.
// TODO: Refactor the CREATE TABLE statements to improve the grammar and the way we
// handle table options.
create_tbl_like_stmt ::=
  tbl_def_without_col_defs:tbl_def
  KW_LIKE table_name:other_table
  opt_comment_val:comment
  file_format_create_table_val:file_format location_val:location
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CreateTableLikeStmt(tbl_def.getTblName(), other_table,
        tbl_def.isExternal(), comment != null ? comment.objectValue : null,
        file_format != null ? file_format.objectValue : null, location,
        tbl_def.getIfNotExists());
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

// Used for creating tables where the schema is inferred externally, e.g., from an Avro
// schema, Kudu table or query statement.
tbl_def_without_col_defs ::=
  KW_CREATE external_val:external KW_TABLE if_not_exists_val:if_not_exists
  table_name:table
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new TableDef(table, external.objectValue, if_not_exists.objectValue);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

tbl_def_with_col_defs ::=
  tbl_def_without_col_defs:tbl_def LPAREN column_def_list:list RPAREN
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    tbl_def.getColumnDefs().addAll(list.objectValue);
    RESULT = tbl_def;
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | tbl_def_without_col_defs:tbl_def LPAREN column_def_list:list COMMA
    primary_keys:primary_keys RPAREN
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    tbl_def.getColumnDefs().addAll(list.objectValue);
    tbl_def.getPrimaryKeyColumnNames().addAll(primary_keys.objectValue);
    RESULT = tbl_def;
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_4_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

primary_keys ::=
  KW_PRIMARY key_ident LPAREN ident_list:col_names RPAREN
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = col_names;
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_4_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

tbl_options ::=
  opt_comment_val:comment row_format_val:row_format serde_properties:serde_props
  file_format_create_table_val:file_format location_val:location cache_op_val:cache_op
  tbl_properties:tbl_props
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    CreateTableStmt.unescapeProperties(serde_props.objectValue);
    CreateTableStmt.unescapeProperties(tbl_props.objectValue);
    RESULT = new TableDef.Options(comment != null ? comment.objectValue : null,
        row_format != null ? row_format.objectValue : null,
        serde_props.objectValue, file_format != null ? file_format.objectValue : null,
        location, cache_op, tbl_props.objectValue);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_tbl_data_layout ::=
  partition_column_defs:partition_column_defs
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = TableDataLayout.createPartitionedLayout(partition_column_defs.objectValue);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | partitioned_data_layout:data_layout
  {: RESULT = data_layout; :}
  ;

partitioned_data_layout ::=
  partition_param_list:partition_params
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = TableDataLayout.createKuduPartitionedLayout(partition_params.objectValue);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {:
    RESULT = TableDataLayout.createEmptyLayout();
  :}
  ;

partition_column_defs ::=
  KW_PARTITIONED KW_BY LPAREN column_def_list:col_defs RPAREN
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = col_defs;
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_4_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

// The PARTITION BY clause contains any number of HASH() clauses followed by exactly zero
// or one RANGE clauses
partition_param_list ::=
  KW_PARTITION KW_BY hash_partition_param_list:list
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
  :}
  | KW_PARTITION KW_BY range_partition_param:rng
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<ArrayList<KuduPartitionParam>>(_2_symbol.start, _0_symbol.end, Lists.newArrayList(rng));
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_PARTITION KW_BY hash_partition_param_list:list COMMA range_partition_param:rng
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(rng);
    RESULT = list;
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_4_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

// A list of HASH partitioning clauses used for flexible partitioning
hash_partition_param_list ::=
  hash_partition_param:dc
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<ArrayList<KuduPartitionParam>>(_0_symbol.start, _0_symbol.end, Lists.newArrayList(dc));
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | hash_partition_param_list:list COMMA hash_partition_param:d
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(d);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

// The column list for a HASH clause is optional.
hash_partition_param ::=
  KW_HASH LPAREN ident_list:cols RPAREN KW_PARTITIONS INTEGER_LITERAL:numPartitions
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = KuduPartitionParam.createHashParam(cols.objectValue, numPartitions.intValue());
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_HASH KW_PARTITIONS INTEGER_LITERAL:numPartitions
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = KuduPartitionParam.createHashParam(Lists.<String>newArrayList(),
        numPartitions.intValue());
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

// The column list for a RANGE clause is optional.
range_partition_param ::=
  KW_RANGE LPAREN ident_list:cols RPAREN LPAREN range_params_list:ranges RPAREN
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = KuduPartitionParam.createRangeParam(cols.objectValue, ranges.objectValue);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_RANGE LPAREN range_params_list:ranges RPAREN
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = KuduPartitionParam.createRangeParam(Collections.<String>emptyList(), ranges.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

range_params_list ::=
  range_param:param
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<List<RangePartition>>(_0_symbol.start, _0_symbol.end, Lists.<RangePartition>newArrayList(param));
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | range_params_list:list COMMA range_param:param
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(param);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

range_param ::=
  KW_PARTITION opt_lower_range_val:lower_val KW_VALUES opt_upper_range_val:upper_val
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = RangePartition.createFromRange(
        lower_val != null ? lower_val.objectValue : null,
        upper_val != null ? upper_val.objectValue : null);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  // Use dotted_path to avoid reduce/reduce conflicts with expr
  | KW_PARTITION dotted_path:val EQUAL expr:l
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (!val.objectValue.get(0).toUpperCase().equals("VALUE")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "VALUE");
    }
    RESULT = RangePartition.createFromValues(Lists.newArrayList(l));
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_PARTITION dotted_path:val EQUAL LPAREN expr_list:l RPAREN
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (!val.objectValue.get(0).toUpperCase().equals("VALUE")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "VALUE");
    }
    RESULT = RangePartition.createFromValues(l.objectValue);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_lower_range_val ::=
  expr:l LESSTHAN
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Expr, Boolean>>(_1_symbol.start, _0_symbol.end, new Pair<Expr, Boolean>(l, false));
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:l LESSTHAN EQUAL
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Expr, Boolean>>(_2_symbol.start, _0_symbol.end, new Pair<Expr, Boolean>(l, true));
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

opt_upper_range_val ::=
  LESSTHAN expr:l
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Expr, Boolean>>(_1_symbol.start, _0_symbol.end, new Pair<Expr, Boolean>(l, false));
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | LESSTHAN EQUAL expr:l
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Expr, Boolean>>(_2_symbol.start, _0_symbol.end, new Pair<Expr, Boolean>(l, true));
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

create_udf_stmt ::=
  KW_CREATE KW_FUNCTION if_not_exists_val:if_not_exists
  function_name:fn_name function_def_args:fn_args
  KW_RETURNS type_def:return_type
  KW_LOCATION STRING_LITERAL:binary_path
  function_def_args_map:arg_map
  {:
    ExtendSymbol _9_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 9);
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    HdfsUri hdfsUri = new HdfsUri(binary_path);
    hdfsUri.startPosition = _1_symbol.start;
    hdfsUri.endPosition = _1_symbol.end;
    hdfsUri.objectValue = binary_path;

    RESULT = new CreateUdfStmt(fn_name, fn_args, return_type, hdfsUri,
        if_not_exists.objectValue, arg_map.objectValue);
    RESULT.startPosition = _9_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_9_symbol),
        ObjectSyntaxBlock.valueOf(_8_symbol),
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_CREATE KW_FUNCTION if_not_exists_val:if_not_exists
    function_name:fn_name KW_LOCATION STRING_LITERAL:binary_path
    function_def_args_map:arg_map
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    HdfsUri hdfsUri = new HdfsUri(binary_path);
    hdfsUri.startPosition = _1_symbol.start;
    hdfsUri.endPosition = _1_symbol.end;
    hdfsUri.objectValue = binary_path;

    RESULT = new CreateUdfStmt(fn_name, null, null, hdfsUri,
        if_not_exists.objectValue, arg_map.objectValue);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

create_uda_stmt ::=
  KW_CREATE KW_AGGREGATE KW_FUNCTION if_not_exists_val:if_not_exists
  function_name:fn_name function_def_args:fn_args
  KW_RETURNS type_def:return_type
  opt_aggregate_fn_intermediate_type_def:intermediate_type
  KW_LOCATION STRING_LITERAL:binary_path
  function_def_args_map:arg_map
  {:
    ExtendSymbol _11_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 11);
    ExtendSymbol _10_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 10);
    ExtendSymbol _9_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 9);
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    HdfsUri hdfsUri = new HdfsUri(binary_path);
    hdfsUri.startPosition = _1_symbol.start;
    hdfsUri.endPosition = _1_symbol.end;
    hdfsUri.objectValue = binary_path;

    RESULT = new CreateUdaStmt(fn_name, fn_args, return_type, intermediate_type,
        hdfsUri, if_not_exists.objectValue, arg_map.objectValue);
    RESULT.startPosition = _11_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_11_symbol),
        ObjectSyntaxBlock.valueOf(_10_symbol),
        ObjectSyntaxBlock.valueOf(_9_symbol),
        ObjectSyntaxBlock.valueOf(_8_symbol),
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

cache_op_val ::=
  KW_CACHED KW_IN STRING_LITERAL:pool_name opt_cache_op_replication:replication
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new HdfsCachingOp(pool_name,
        replication != null ? replication.objectValue : null);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_UNCACHED
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new HdfsCachingOp();
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

opt_cache_op_replication ::=
  KW_WITH KW_REPLICATION EQUAL INTEGER_LITERAL:replication
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<BigDecimal>(_3_symbol.start, _0_symbol.end, replication);
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_3_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

comment_val ::=
  KW_COMMENT STRING_LITERAL:comment
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<String>(_1_symbol.start, _0_symbol.end, comment);
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  ;

opt_comment_val ::=
  KW_COMMENT STRING_LITERAL:comment
  {:
    ExtendSymbol commentKeywordSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol commentSymbol = (ExtendSymbol)CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(commentKeywordSymbol.start, commentSymbol.end, comment);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(commentKeywordSymbol),
        ObjectSyntaxBlock.valueOf(commentSymbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

location_val ::=
  KW_LOCATION STRING_LITERAL:location
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new HdfsUri(location);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

opt_init_string_val ::=
  LPAREN STRING_LITERAL:init_string RPAREN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<String>(_2_symbol.start, _0_symbol.end, init_string);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

external_val ::=
  KW_EXTERNAL
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(false);
  :}
  ;

purge_val ::=
  KW_PURGE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(false);
  :}
  ;

if_not_exists_val ::=
  KW_IF KW_NOT KW_EXISTS
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_2_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(false);
  :}
  ;

row_format_val ::=
  KW_ROW KW_FORMAT KW_DELIMITED field_terminator_val:field_terminator
  escaped_by_val:escaped_by line_terminator_val:line_terminator
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<RowFormat>(_5_symbol.start, _0_symbol.end,
        new RowFormat(field_terminator != null ? field_terminator.objectValue : null,
        line_terminator != null ? line_terminator.objectValue : null,
        escaped_by != null ? escaped_by.objectValue : null));
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |/* empty */
  {: RESULT = null; :}
  ;

escaped_by_val ::=
  KW_ESCAPED KW_BY STRING_LITERAL:escaped_by
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<String>(_2_symbol.start, _0_symbol.end, escaped_by);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

line_terminator_val ::=
  KW_LINES terminator_val:line_terminator
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = line_terminator;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

field_terminator_val ::=
  KW_FIELDS terminator_val:field_terminator
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = field_terminator;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

terminator_val ::=
  KW_TERMINATED KW_BY STRING_LITERAL:terminator
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<String>(_2_symbol.start, _0_symbol.end, terminator);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

file_format_create_table_val ::=
  KW_STORED KW_AS file_format_val:file_format
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = file_format;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
  :}
  |
  {: RESULT = null; :}
  ;

file_format_val ::=
  KW_KUDU
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<THdfsFileFormat>(_0_symbol.start, _0_symbol.end, THdfsFileFormat.KUDU);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_PARQUET
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<THdfsFileFormat>(_0_symbol.start, _0_symbol.end, THdfsFileFormat.PARQUET);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_PARQUETFILE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<THdfsFileFormat>(_0_symbol.start, _0_symbol.end, THdfsFileFormat.PARQUET);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_TEXTFILE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<THdfsFileFormat>(_0_symbol.start, _0_symbol.end, THdfsFileFormat.TEXT);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SEQUENCEFILE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<THdfsFileFormat>(_0_symbol.start, _0_symbol.end, THdfsFileFormat.SEQUENCE_FILE);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_RCFILE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<THdfsFileFormat>(_0_symbol.start, _0_symbol.end, THdfsFileFormat.RC_FILE);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_AVRO
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<THdfsFileFormat>(_0_symbol.start, _0_symbol.end, THdfsFileFormat.AVRO);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

tbl_properties ::=
  KW_TBLPROPERTIES LPAREN properties_map:map RPAREN
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = map;
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | /* empty */
  {:
    RESULT = new ObjectSyntaxBlock<HashMap>(new HashMap<String, String>());
  :}
  ;

serde_properties ::=
  KW_WITH KW_SERDEPROPERTIES LPAREN properties_map:map RPAREN
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = map;
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_4_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | /* empty */
  {:
    RESULT = new ObjectSyntaxBlock<HashMap>(new HashMap<String, String>());
  :}
  ;

properties_map ::=
  STRING_LITERAL:key EQUAL STRING_LITERAL:value
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    HashMap<String, String> properties = new HashMap<String, String>();
    properties.put(key, value);
    RESULT = new ObjectSyntaxBlock<HashMap>(_2_symbol.start, _0_symbol.end, properties);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | properties_map:properties COMMA STRING_LITERAL:key EQUAL STRING_LITERAL:value
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    properties.objectValue.put(key, value);
    RESULT = properties;
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

column_def_list ::=
  column_def:col_def
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<ColumnDef> list = Lists.newArrayList();
    list.add(col_def);
    RESULT = new ObjectSyntaxBlock<ArrayList<ColumnDef>>(_0_symbol.start, _0_symbol.end, list);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | column_def_list:list COMMA column_def:col_def
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(col_def);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

column_def ::=
  ident_or_default:col_name type_def:type column_options_map:options
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ColumnDef(col_name.objectValue, type, options.objectValue);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | ident_or_default:col_name type_def:type
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ColumnDef(col_name.objectValue, type);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

column_options_map ::=
  column_options_map:map column_option:col_option
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (map.objectValue.put(col_option.objectValue.first, col_option.objectValue.second) != null) {
      throw new Exception(String.format("Column option %s is specified multiple times",
          col_option.objectValue.first.toString()));
    }
    RESULT = map;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | column_option:col_option
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    Map<Option, Object> options = Maps.newHashMap();
    options.put(col_option.objectValue.first, col_option.objectValue.second);
    RESULT = new ObjectSyntaxBlock<Map<Option, Object>>(_0_symbol.start, _0_symbol.end, options);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

column_option ::=
  is_primary_key_val:primary_key
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Option, Object>>(_0_symbol.start, _0_symbol.end,
        new Pair<Option, Object>(Option.IS_PRIMARY_KEY, primary_key.objectValue));
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | nullability_val:nullability
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Option, Object>>(_0_symbol.start, _0_symbol.end,
        new Pair<Option, Object>(Option.IS_NULLABLE, nullability.objectValue));
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | encoding_val:encoding
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Option, Object>>(_0_symbol.start, _0_symbol.end,
        new Pair<Option, Object>(Option.ENCODING, encoding.objectValue));
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | compression_val:compression
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Option, Object>>(_0_symbol.start, _0_symbol.end,
        new Pair<Option, Object>(Option.COMPRESSION, compression.objectValue));
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | default_val:default_val
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Option, Object>>(_0_symbol.start, _0_symbol.end,
        new Pair<Option, Object>(Option.DEFAULT, default_val));
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | block_size_val:block_size
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Option, Object>>(_0_symbol.start, _0_symbol.end,
        new Pair<Option, Object>(Option.BLOCK_SIZE, block_size));
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | comment_val:comment
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Pair<Option, Object>>(_0_symbol.start, _0_symbol.end,
        new Pair<Option, Object>(Option.COMMENT, comment.objectValue));
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

is_primary_key_val ::=
  KW_PRIMARY key_ident
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_1_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

nullability_val ::=
  KW_NOT KW_NULL
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_1_symbol.start, _0_symbol.end, false);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_NULL
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

encoding_val ::=
  KW_ENCODING ident_or_default:encoding_ident
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = encoding_ident;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  ;

compression_val ::=
  KW_COMPRESSION ident_or_default:compression_ident
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = compression_ident;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  ;

default_val ::=
  KW_DEFAULT expr:default_val
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = default_val;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  ;

block_size_val ::=
  KW_BLOCKSIZE literal:block_size
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = block_size;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  ;

create_view_stmt ::=
  KW_CREATE KW_VIEW if_not_exists_val:if_not_exists table_name:view_name
  view_column_defs:col_defs opt_comment_val:comment KW_AS query_stmt:view_def
  {:
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CreateViewStmt(if_not_exists.objectValue, view_name,
        col_defs != null ? col_defs.objectValue : null,
        comment != null ? comment.objectValue : null, view_def);
    RESULT.startPosition = _7_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

create_data_src_stmt ::=
  KW_CREATE KW_DATA source_ident:is_source_id
  if_not_exists_val:if_not_exists ident_or_default:data_src_name
  KW_LOCATION STRING_LITERAL:location
  KW_CLASS STRING_LITERAL:class_name
  KW_API_VERSION STRING_LITERAL:api_version
  {:
    ExtendSymbol _10_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 10);
    ExtendSymbol _9_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 9);
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    HdfsUri hdfsUri = new HdfsUri(location);
    hdfsUri.startPosition = _2_symbol.start;
    hdfsUri.endPosition = _2_symbol.end;
    hdfsUri.objectValue = location;

    RESULT = new CreateDataSrcStmt(data_src_name.objectValue, hdfsUri, class_name,
        api_version, if_not_exists.objectValue);
    RESULT.startPosition = _10_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_10_symbol),
        ObjectSyntaxBlock.valueOf(_9_symbol),
        ObjectSyntaxBlock.valueOf(_8_symbol),
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

key_ident ::=
  IDENT:ident
  {:
    if (!ident.toUpperCase().equals("KEY")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "KEY");
    }
  :}
  ;

source_ident ::=
  IDENT:ident
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (!ident.toUpperCase().equals("SOURCE")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "SOURCE");
    }
    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

sources_ident ::=
  IDENT:ident
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (!ident.toUpperCase().equals("SOURCES")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "SOURCES");
    }
    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

uri_ident ::=
  IDENT:ident
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (!ident.toUpperCase().equals("URI")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "URI");
    }
    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

server_ident ::=
  IDENT:ident
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (!ident.toUpperCase().equals("SERVER")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "SERVER");
    }
    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

option_ident ::=
  IDENT:ident
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (!ident.toUpperCase().equals("OPTION")) {
      parser.parseError("identifier", SqlParserSymbols.IDENT, "OPTION");
    }
    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

view_column_defs ::=
  LPAREN view_column_def_list:view_col_defs RPAREN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = view_col_defs;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

view_column_def_list ::=
  view_column_def:col_def
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<ColumnDef> list = new ArrayList<ColumnDef>();
    list.add(col_def);
    RESULT = new ObjectSyntaxBlock<ArrayList<ColumnDef>>(_0_symbol.start, _0_symbol.end, list);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | view_column_def_list:list COMMA view_column_def:col_def
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(col_def);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

view_column_def ::=
  ident_or_default:col_name opt_comment_val:comment
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    Map<Option, Object> options = Maps.newHashMap();
    if (comment != null) options.put(Option.COMMENT, comment.objectValue);
    RESULT = new ColumnDef(col_name.objectValue, null, options);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

alter_view_stmt ::=
  KW_ALTER KW_VIEW table_name:table KW_AS query_stmt:view_def
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterViewStmt(table, view_def);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ALTER KW_VIEW table_name:before_table KW_RENAME KW_TO table_name:new_table
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AlterTableOrViewRenameStmt(before_table, new_table, false);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

cascade_val ::=
  KW_CASCADE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_RESTRICT
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, false);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(false);
  :}
  ;

compute_stats_stmt ::=
  KW_COMPUTE KW_STATS table_name:table
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ComputeStatsStmt(table);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_COMPUTE KW_INCREMENTAL KW_STATS table_name:table
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ComputeStatsStmt(table, true, null);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_COMPUTE KW_INCREMENTAL KW_STATS table_name:table partition_set:partitions
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ComputeStatsStmt(table, true, partitions);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

drop_stats_stmt ::=
  KW_DROP KW_STATS table_name:table
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DropStatsStmt(table);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_DROP KW_INCREMENTAL KW_STATS table_name:table partition_set:partitions
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DropStatsStmt(table, partitions);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

drop_db_stmt ::=
  KW_DROP db_or_schema_kw if_exists_val:if_exists ident_or_default:db_name
  cascade_val:cascade
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DropDbStmt(db_name.objectValue, if_exists.objectValue, cascade.objectValue);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

drop_tbl_or_view_stmt ::=
  KW_DROP KW_TABLE if_exists_val:if_exists table_name:table purge_val:purge
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DropTableOrViewStmt(table, if_exists.objectValue, true, purge.objectValue);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_DROP KW_VIEW if_exists_val:if_exists table_name:table
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DropTableOrViewStmt(table, if_exists.objectValue, false, false);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

drop_function_stmt ::=
  KW_DROP opt_is_aggregate_fn:is_aggregate KW_FUNCTION
      if_exists_val:if_exists function_name:fn_name
  function_def_args:fn_args
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DropFunctionStmt(fn_name, fn_args, if_exists.objectValue);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_DROP opt_is_aggregate_fn:is_aggregate KW_FUNCTION
    if_exists_val:if_exists function_name:fn_name
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DropFunctionStmt(fn_name, null, if_exists.objectValue);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

drop_data_src_stmt ::=
  KW_DROP KW_DATA source_ident:is_source_id if_exists_val:if_exists
  ident_or_default:data_src_name
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DropDataSrcStmt(data_src_name.objectValue, if_exists.objectValue);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

db_or_schema_kw ::=
  KW_DATABASE
  | KW_SCHEMA
  ;

dbs_or_schemas_kw ::=
  KW_DATABASES
  | KW_SCHEMAS
  ;

if_exists_val ::=
  KW_IF KW_EXISTS
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_1_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(false);
  :}
  ;

partition_clause ::=
  KW_PARTITION LPAREN partition_key_value_list:list RPAREN
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = list;
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  |
  {: RESULT = null; :}
  ;

partition_key_value_list ::=
  partition_key_value:item
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<PartitionKeyValue> list = new ArrayList<PartitionKeyValue>();
    list.add(item);
    RESULT = new ObjectSyntaxBlock<ArrayList<PartitionKeyValue>>(_0_symbol.start, _0_symbol.end, list);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | partition_key_value_list:list COMMA partition_key_value:item
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(item);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

// TODO: reuse this for INSERT statement.
// A partition set is a set of expressions used to select a list of partitions
// for certain operation such as DROP PARTITION. This is different than a partition
// clause in an INSERT statement. Partition clause contains dynamic and static
// partition key/values.
partition_set ::=
  KW_PARTITION LPAREN expr_list:list RPAREN
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new PartitionSet(list.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_partition_set ::=
  partition_set:partition_set
  {: RESULT = partition_set; :}
  | /* Empty */
  {: RESULT = null; :}
  ;

// A partition spec is a set of static partition key/value pairs. This is a bit
// different than a partition clause in an INSERT statement because that allows
// for dynamic and static partition key/values.
partition_spec ::=
  KW_PARTITION LPAREN static_partition_key_value_list:list RPAREN
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new PartitionSpec(list.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_partition_spec ::=
  partition_spec:partition_spec
  {: RESULT = partition_spec; :}
  | /* Empty */
  {: RESULT = null; :}
  ;

static_partition_key_value_list ::=
  static_partition_key_value:item
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<PartitionKeyValue> list = new ArrayList<PartitionKeyValue>();
    list.add(item);
    RESULT = new ObjectSyntaxBlock<ArrayList<PartitionKeyValue>>(_0_symbol.start, _0_symbol.end, list);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | static_partition_key_value_list:list COMMA static_partition_key_value:item
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(item);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

partition_key_value ::=
  // Dynamic partition key values.
  ident_or_default:column
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new PartitionKeyValue(column.objectValue, null);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | static_partition_key_value:partition
  {: RESULT = partition; :}
  ;

static_partition_key_value ::=
  // Static partition key values.
  ident_or_default:column EQUAL expr:e
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new PartitionKeyValue(column.objectValue, e);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

function_def_args ::=
  LPAREN RPAREN
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new FunctionArgs();
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | LPAREN function_def_arg_list:args opt_is_varargs:var_args RPAREN
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    args.setHasVarArgs(var_args.objectValue);
    RESULT = args;
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

function_def_arg_list ::=
  type_def:type_def
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    FunctionArgs args = new FunctionArgs();
    args.getArgTypeDefs().add(type_def);
    RESULT = args;
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | function_def_arg_list:args COMMA type_def:type_def
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    args.getArgTypeDefs().add(type_def);
    RESULT = args;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

opt_is_aggregate_fn ::=
  KW_AGGREGATE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(false);
  :}
  ;

opt_is_varargs ::=
  DOTDOTDOT
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(false);
  :}
  ;

opt_aggregate_fn_intermediate_type_def ::=
  KW_INTERMEDIATE type_def:type_def
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = type_def;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  |
  {: RESULT = null; :}
  ;

function_def_args_map ::=
  function_def_arg_key:key EQUAL STRING_LITERAL:value
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    HashMap<CreateFunctionStmtBase.OptArg, String> args =
        new HashMap<CreateFunctionStmtBase.OptArg, String>();
    args.put(key.objectValue, value);
    RESULT = new ObjectSyntaxBlock<HashMap>(_2_symbol.start, _0_symbol.end, args);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | function_def_args_map:args function_def_arg_key:key EQUAL STRING_LITERAL:value
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (args.objectValue.containsKey(key.objectValue)) throw new Exception("Duplicate argument key: " + key.objectValue);
    args.objectValue.put(key.objectValue, value);
    RESULT = args;
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  |
  {:
    RESULT = new ObjectSyntaxBlock<HashMap>(new HashMap<CreateFunctionStmtBase.OptArg, String>());
  :}
  ;

// Any keys added here must also be added to the end of the precedence list.
function_def_arg_key ::=
  KW_COMMENT
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<CreateFunctionStmtBase.OptArg>(_0_symbol.start, _0_symbol.end,
        CreateFunctionStmtBase.OptArg.COMMENT);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SYMBOL
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<CreateFunctionStmtBase.OptArg>(_0_symbol.start, _0_symbol.end,
        CreateFunctionStmtBase.OptArg.SYMBOL);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_PREPARE_FN
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<CreateFunctionStmtBase.OptArg>(_0_symbol.start, _0_symbol.end,
        CreateFunctionStmtBase.OptArg.PREPARE_FN);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_CLOSE_FN
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<CreateFunctionStmtBase.OptArg>(_0_symbol.start, _0_symbol.end,
        CreateFunctionStmtBase.OptArg.CLOSE_FN);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_UPDATE_FN
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<CreateFunctionStmtBase.OptArg>(_0_symbol.start, _0_symbol.end,
        CreateFunctionStmtBase.OptArg.UPDATE_FN);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_INIT_FN
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<CreateFunctionStmtBase.OptArg>(_0_symbol.start, _0_symbol.end,
        CreateFunctionStmtBase.OptArg.INIT_FN);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SERIALIZE_FN
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<CreateFunctionStmtBase.OptArg>(_0_symbol.start, _0_symbol.end,
        CreateFunctionStmtBase.OptArg.SERIALIZE_FN);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_MERGE_FN
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<CreateFunctionStmtBase.OptArg>(_0_symbol.start, _0_symbol.end,
        CreateFunctionStmtBase.OptArg.MERGE_FN);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_FINALIZE_FN
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<CreateFunctionStmtBase.OptArg>(_0_symbol.start, _0_symbol.end,
        CreateFunctionStmtBase.OptArg.FINALIZE_FN);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

// Our parsing of UNION is slightly different from MySQL's:
// http://dev.mysql.com/doc/refman/5.5/en/union.html
//
// Imo, MySQL's parsing of union is not very clear.
// For example, MySQL cannot parse this query:
// select 3 order by 1 limit 1 union all select 1;
//
// On the other hand, MySQL does parse this query, but associates
// the order by and limit with the union, not the select:
// select 3 as g union all select 1 order by 1 limit 2;
//
// MySQL also allows some combinations of select blocks
// with and without parenthesis, but also disallows others.
//
// Our parsing:
// Select blocks may or may not be in parenthesis,
// even if the union has order by and limit.
// ORDER BY and LIMIT bind to the preceding select statement by default.
query_stmt ::=
  opt_with_clause:w union_operand_list:operands
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    QueryStmt queryStmt = null;
    if (operands.objectValue.size() == 1) {
      queryStmt = operands.objectValue.get(0).getQueryStmt();
      queryStmt.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
    } else {
      queryStmt = new UnionStmt(operands.objectValue, null, null);
      queryStmt.subBlocks = Lists.newArrayList(
          ObjectSyntaxBlock.valueOf(_1_symbol),
          ObjectSyntaxBlock.valueOf(_0_symbol)
      );
    }
    queryStmt.setWithClause(w);
    RESULT = queryStmt;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
  :}
  | opt_with_clause:w union_with_order_by_or_limit:union
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    union.setWithClause(w);
    RESULT = union;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  ;

opt_with_clause ::=
  KW_WITH with_view_def_list:list
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new WithClause(list.objectValue);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

with_view_def ::=
  ident_or_default:alias KW_AS LPAREN query_stmt:query RPAREN
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<View>(_4_symbol.start, _0_symbol.end,
        new View(alias.objectValue, query, null));
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | STRING_LITERAL:alias KW_AS LPAREN query_stmt:query RPAREN
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<View>(_4_symbol.start, _0_symbol.end,
        new View(alias, query, null));
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | ident_or_default:alias LPAREN ident_list:col_names RPAREN KW_AS LPAREN
    query_stmt:query RPAREN
  {:
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<View>(_7_symbol.start, _0_symbol.end,
        new View(alias.objectValue, query, col_names.objectValue));
    RESULT.startPosition = _7_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | STRING_LITERAL:alias LPAREN ident_list:col_names RPAREN
    KW_AS LPAREN query_stmt:query RPAREN
  {:
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<View>(_7_symbol.start, _0_symbol.end,
        new View(alias, query, col_names.objectValue));
    RESULT.startPosition = _7_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

with_view_def_list ::=
  with_view_def:v
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<View> list = new ArrayList<View>();
    list.add(v.objectValue);
    RESULT = new ObjectSyntaxBlock<ArrayList<View>>(_0_symbol.start, _0_symbol.end, list);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | with_view_def_list:list COMMA with_view_def:v
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(v.objectValue);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

// We must have a non-empty order by or limit for them to bind to the union.
// We cannot reuse the existing opt_order_by_clause or
// limit_clause because they would introduce conflicts with EOF,
// which, unfortunately, cannot be accessed in the parser as a nonterminal
// making this issue unresolvable.
// We rely on the left precedence of KW_ORDER, KW_BY, and KW_LIMIT,
// to resolve the ambiguity with select_stmt in favor of select_stmt
// (i.e., ORDER BY and LIMIT bind to the select_stmt by default, and not the union).
// There must be at least two union operands for ORDER BY or LIMIT to bind to a union,
// and we manually throw a parse error if we reach this production
// with only a single operand.
union_with_order_by_or_limit ::=
    union_operand_list:operands
    KW_ORDER KW_BY order_by_elements:orderByClause
    opt_offset_param:offsetExpr
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (operands.objectValue.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    LimitElement limitElement = new LimitElement(null, offsetExpr);
    limitElement.startPosition = _0_symbol.start;
    limitElement.endPosition = _0_symbol.end;
    limitElement.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
    RESULT = new UnionStmt(operands.objectValue, orderByClause.objectValue, limitElement);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |
    union_operand_list:operands
    KW_LIMIT expr:limitExpr
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (operands.objectValue.size() == 1) {
      parser.parseError("limit", SqlParserSymbols.KW_LIMIT);
    }
    LimitElement limitElement = new LimitElement(limitExpr, null);
    limitElement.startPosition = _1_symbol.start;
    limitElement.endPosition = _0_symbol.end;
    limitElement.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
    RESULT = new UnionStmt(operands.objectValue, null, limitElement);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |
    union_operand_list:operands
    KW_ORDER KW_BY order_by_elements:orderByClause
    KW_LIMIT expr:limitExpr opt_offset_param:offsetExpr
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (operands.objectValue.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    LimitElement limitElement = new LimitElement(limitExpr, null);
    limitElement.startPosition = _2_symbol.start;
    limitElement.endPosition = _0_symbol.end;
    limitElement.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
    RESULT = new UnionStmt(operands.objectValue, orderByClause.objectValue, limitElement);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

union_operand ::=
  select_stmt:select
  {: RESULT = select; :}
  | values_stmt:values
  {: RESULT = values; :}
  | LPAREN query_stmt:query RPAREN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = query;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

union_operand_list ::=
  union_operand:operand
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    List<UnionOperand> operands = new ArrayList<UnionOperand>();
    UnionOperand unionOperand = new UnionOperand(operand, null);
    unionOperand.startPosition = _0_symbol.start;
    unionOperand.endPosition = _0_symbol.end;
    unionOperand.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );

    operands.add(unionOperand);
    RESULT = new ObjectSyntaxBlock<List<UnionOperand>>(_0_symbol.start, _0_symbol.end, operands);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | union_operand_list:operands union_op:op union_operand:operand
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    UnionOperand unionOperand = new UnionOperand(operand, op.objectValue);
    unionOperand.startPosition = _1_symbol.start;
    unionOperand.endPosition = _0_symbol.end;
    unionOperand.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );

    operands.objectValue.add(unionOperand);
    RESULT = new ObjectSyntaxBlock<List<UnionOperand>>(_2_symbol.start, _0_symbol.end, operands.objectValue);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

union_op ::=
  KW_UNION
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Qualifier>(_0_symbol.start, _0_symbol.end, Qualifier.DISTINCT);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_UNION KW_DISTINCT
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Qualifier>(_1_symbol.start, _0_symbol.end, Qualifier.DISTINCT);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_UNION KW_ALL
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Qualifier>(_1_symbol.start, _0_symbol.end, Qualifier.ALL);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

values_stmt ::=
  KW_VALUES values_operand_list:operands
  opt_order_by_clause:orderByClause
  opt_limit_offset_clause:limitOffsetClause
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ValuesStmt(operands.objectValue,
        orderByClause != null ? orderByClause.objectValue : null, limitOffsetClause);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_VALUES LPAREN values_operand_list:operands RPAREN
    opt_order_by_clause:orderByClause
    opt_limit_offset_clause:limitOffsetClause
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ValuesStmt(operands.objectValue,
        orderByClause != null ? orderByClause.objectValue : null, limitOffsetClause);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

values_operand_list ::=
  LPAREN select_list:selectList RPAREN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    SelectStmt selectStmt = new SelectStmt(selectList, null, null, null, null, null, null);
    selectStmt.startPosition = _1_symbol.start;
    selectStmt.endPosition = _1_symbol.end;
    selectStmt.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol)
    );

    UnionOperand unionOperand = new UnionOperand(selectStmt, null);
    unionOperand.startPosition = _1_symbol.start;
    unionOperand.endPosition = _1_symbol.end;
    unionOperand.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol)
    );

    List<UnionOperand> operands = new ArrayList<UnionOperand>();
    operands.add(unionOperand);
    RESULT = new ObjectSyntaxBlock<List<UnionOperand>>(_2_symbol.start, _0_symbol.end, operands);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | values_operand_list:operands COMMA LPAREN select_list:selectList RPAREN
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    SelectStmt selectStmt = new SelectStmt(selectList, null, null, null, null, null, null);
    selectStmt.startPosition = _1_symbol.start;
    selectStmt.endPosition = _1_symbol.end;
    selectStmt.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol)
    );

    UnionOperand unionOperand = new UnionOperand(selectStmt, Qualifier.ALL);
    unionOperand.startPosition = _1_symbol.start;
    unionOperand.endPosition = _1_symbol.end;
    unionOperand.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol)
    );

    operands.objectValue.add(unionOperand);
    RESULT = operands;
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

use_stmt ::=
  KW_USE ident_or_default:db
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new UseStmt(db.objectValue);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_tables_stmt ::=
  KW_SHOW KW_TABLES
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowTablesStmt();
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_TABLES show_pattern:showPattern
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowTablesStmt(showPattern.objectValue);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_TABLES KW_IN ident_or_default:db
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowTablesStmt(db.objectValue, null);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_TABLES KW_IN ident_or_default:db show_pattern:showPattern
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowTablesStmt(db.objectValue, showPattern.objectValue);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_dbs_stmt ::=
  KW_SHOW dbs_or_schemas_kw
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowDbsStmt();
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW dbs_or_schemas_kw show_pattern:showPattern
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowDbsStmt(showPattern.objectValue);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_stats_stmt ::=
  KW_SHOW KW_TABLE KW_STATS table_name:table
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowStatsStmt(table, TShowStatsOp.TABLE_STATS);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_COLUMN KW_STATS table_name:table
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowStatsStmt(table, TShowStatsOp.COLUMN_STATS);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_partitions_stmt ::=
  KW_SHOW KW_PARTITIONS table_name:table
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowStatsStmt(table, TShowStatsOp.PARTITIONS);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_range_partitions_stmt ::=
  KW_SHOW KW_RANGE KW_PARTITIONS table_name:table
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowStatsStmt(table, TShowStatsOp.RANGE_PARTITIONS);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_functions_stmt ::=
  KW_SHOW opt_function_category:fn_type KW_FUNCTIONS
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowFunctionsStmt(null, null, fn_type.objectValue);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW opt_function_category:fn_type KW_FUNCTIONS show_pattern:showPattern
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowFunctionsStmt(null, showPattern.objectValue, fn_type.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW opt_function_category:fn_type KW_FUNCTIONS KW_IN ident_or_default:db
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowFunctionsStmt(db.objectValue, null, fn_type.objectValue);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW opt_function_category:fn_type KW_FUNCTIONS KW_IN ident_or_default:db
      show_pattern:showPattern
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowFunctionsStmt(db.objectValue, showPattern.objectValue, fn_type.objectValue);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_function_category ::=
  KW_AGGREGATE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TFunctionCategory>(_0_symbol.start, _0_symbol.end, TFunctionCategory.AGGREGATE);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_ANALYTIC
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TFunctionCategory>(_0_symbol.start, _0_symbol.end, TFunctionCategory.ANALYTIC);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {:
    RESULT = new ObjectSyntaxBlock<TFunctionCategory>(TFunctionCategory.SCALAR);
  :}
  ;

show_data_srcs_stmt ::=
  KW_SHOW KW_DATA sources_ident:is_sources_id
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowDataSrcsStmt();
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_DATA sources_ident:is_sources_id show_pattern:showPattern
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowDataSrcsStmt(showPattern.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_pattern ::=
  STRING_LITERAL:showPattern
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<String>(_0_symbol.start, _0_symbol.end, showPattern);
    RESULT.objectValue = showPattern;
  :}
  | KW_LIKE STRING_LITERAL:showPattern
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<String>(_1_symbol.start, _0_symbol.end, showPattern);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol)
    );
  :}
  ;

show_create_tbl_stmt ::=
  KW_SHOW KW_CREATE show_create_tbl_object_type:object_type table_name:table
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowCreateTableStmt(table, object_type.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_create_tbl_object_type ::=
  KW_TABLE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TCatalogObjectType>(_0_symbol.start, _0_symbol.end, TCatalogObjectType.TABLE);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_VIEW
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TCatalogObjectType>(_0_symbol.start, _0_symbol.end, TCatalogObjectType.VIEW);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_create_function_stmt ::=
  KW_SHOW KW_CREATE KW_FUNCTION function_name:fn_name
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowCreateFunctionStmt(fn_name, TFunctionCategory.SCALAR);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SHOW KW_CREATE KW_AGGREGATE KW_FUNCTION function_name:fn_name
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowCreateFunctionStmt(fn_name, TFunctionCategory.AGGREGATE);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

show_files_stmt ::=
  KW_SHOW KW_FILES KW_IN table_name:table opt_partition_set:partitions
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ShowFilesStmt(table, partitions);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

describe_db_stmt ::=
  KW_DESCRIBE db_or_schema_kw describe_output_style:style ident_or_default:db
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DescribeDbStmt(db.objectValue, style.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

describe_table_stmt ::=
  KW_DESCRIBE describe_output_style:style dotted_path:path
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new DescribeTableStmt(path.objectValue, style.objectValue);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

describe_output_style ::=
  KW_FORMATTED
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TDescribeOutputStyle>(_0_symbol.start, _0_symbol.end, TDescribeOutputStyle.FORMATTED);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_EXTENDED
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<TDescribeOutputStyle>(_0_symbol.start, _0_symbol.end, TDescribeOutputStyle.EXTENDED);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {:
    RESULT = new ObjectSyntaxBlock<TDescribeOutputStyle>(TDescribeOutputStyle.MINIMAL);
  :}
  ;

select_stmt ::=
    select_clause:selectList
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new SelectStmt(selectList, null, null, null, null, null, null);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  |
    select_clause:selectList
    from_clause:fromClause
    where_clause:wherePredicate
    group_by_clause:groupingExprs
    having_clause:havingPredicate
    opt_order_by_clause:orderByClause
    opt_limit_offset_clause:limitOffsetClause
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new SelectStmt(selectList, fromClause, wherePredicate,
                            groupingExprs != null ? groupingExprs.objectValue : null,
                            havingPredicate,
                            orderByClause != null ? orderByClause.objectValue : null, limitOffsetClause);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

select_clause ::=
  KW_SELECT opt_plan_hints:hints select_list:l
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    l.setPlanHints(hints != null ? hints.objectValue: null);
    RESULT = l;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
  :}
  | KW_SELECT KW_ALL opt_plan_hints:hints select_list:l
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    l.setPlanHints(hints != null ? hints.objectValue: null);
    RESULT = l;
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_3_symbol));
  :}
  | KW_SELECT KW_DISTINCT opt_plan_hints:hints select_list:l
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    l.setIsDistinct(true);
    l.setPlanHints(hints != null ? hints.objectValue: null);
    RESULT = l;
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_3_symbol));
  :}
  ;

set_stmt ::=
  KW_SET ident_or_default:key EQUAL literal:l
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new SetStmt(key.objectValue, l.getStringValue());
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SET ident_or_default:key EQUAL ident_or_default:ident
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new SetStmt(key.objectValue, ident.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_SET
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new SetStmt(null, null);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

select_list ::=
  select_list_item:item
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    SelectList list = new SelectList();
    list.getItems().add(item);
    RESULT = list;
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | select_list:list COMMA select_list_item:item
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.getItems().add(item);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

select_list_item ::=
  expr:expr alias_clause:alias
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new SelectListItem(expr, alias.objectValue);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:expr
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new SelectListItem(expr, null);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | star_expr:expr
  {: RESULT = expr; :}
  ;

alias_clause ::=
  KW_AS ident_or_default:ident
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = ident;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | ident_or_default:ident
  {: RESULT = ident; :}
  | KW_AS STRING_LITERAL:l
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<String>(_1_symbol.start, _0_symbol.end, l);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | STRING_LITERAL:l
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<String>(_0_symbol.start, _0_symbol.end, l);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

star_expr ::=
  STAR
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = SelectListItem.createStarItem(null);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | dotted_path:path DOT STAR
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = SelectListItem.createStarItem(path.objectValue);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

table_name ::=
  ident_or_default:tbl
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new TableName(null, tbl.objectValue);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | ident_or_default:db DOT ident_or_default:tbl
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new TableName(db.objectValue, tbl.objectValue);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

function_name ::=
  // Use 'dotted_path' to avoid a reduce/reduce with slot_ref.
  dotted_path:path
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new FunctionName(path.objectValue);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

from_clause ::=
  KW_FROM table_ref_list:l
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new FromClause(l.objectValue);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

table_ref_list ::=
  table_ref:table opt_plan_hints:hints
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<TableRef> list = new ArrayList<TableRef>();
    table.setTableHints(hints != null ? hints.objectValue: null);
    list.add(table);
    RESULT = new ObjectSyntaxBlock<ArrayList<TableRef>>(_1_symbol.start, _0_symbol.end, list);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | table_ref_list:list COMMA table_ref:table opt_plan_hints:hints
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    table.setTableHints(hints != null ? hints.objectValue: null);
    list.objectValue.add(table);
    RESULT = list;
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | table_ref_list:list KW_CROSS KW_JOIN opt_plan_hints:hints table_ref:table
    opt_plan_hints:table_hints
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    table.setJoinOp(JoinOperator.CROSS_JOIN);
    // We will throw an AnalysisException if there are join hints so that we can provide
    // a better error message than a parser exception.
    table.setJoinHints(hints != null ? hints.objectValue: null);
    table.setTableHints(table_hints != null ? table_hints.objectValue: null);
    list.objectValue.add(table);
    RESULT = list;
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_4_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | table_ref_list:list join_operator:op opt_plan_hints:hints table_ref:table
    opt_plan_hints:table_hints
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    table.setJoinOp((JoinOperator) op.objectValue);
    table.setJoinHints(hints != null ? hints.objectValue: null);
    table.setTableHints(table_hints != null ? table_hints.objectValue: null);
    list.objectValue.add(table);
    RESULT = list;
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | table_ref_list:list join_operator:op opt_plan_hints:hints table_ref:table
    opt_plan_hints:table_hints KW_ON expr:e
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    table.setJoinOp((JoinOperator) op.objectValue);
    table.setJoinHints(hints != null ? hints.objectValue: null);
    table.setTableHints(table_hints != null ? table_hints.objectValue: null);
    table.setOnClause(e);
    list.objectValue.add(table);
    RESULT = list;
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_5_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_4_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | table_ref_list:list join_operator:op opt_plan_hints:hints table_ref:table
    opt_plan_hints:table_hints KW_USING LPAREN ident_list:colNames RPAREN
  {:
    ExtendSymbol _8_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 8);
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    table.setJoinOp((JoinOperator) op.objectValue);
    table.setJoinHints(hints != null ? hints.objectValue: null);
    table.setTableHints(table_hints != null ? table_hints.objectValue: null);
    table.setUsingClause(colNames.objectValue);
    list.objectValue.add(table);
    RESULT = list;
    RESULT.startPosition = _8_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_7_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_6_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_5_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_4_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

table_ref ::=
  dotted_path:path
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new TableRef(path.objectValue, null);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | dotted_path:path alias_clause:alias
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new TableRef(path.objectValue, alias.objectValue);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | LPAREN query_stmt:query RPAREN alias_clause:alias
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new InlineViewRef(alias.objectValue, query);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

join_operator ::=
  opt_inner KW_JOIN
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<JoinOperator>(_1_symbol.start, _0_symbol.end, JoinOperator.INNER_JOIN);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_LEFT opt_outer KW_JOIN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<JoinOperator>(_2_symbol.start, _0_symbol.end, JoinOperator.LEFT_OUTER_JOIN);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_RIGHT opt_outer KW_JOIN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<JoinOperator>(_2_symbol.start, _0_symbol.end, JoinOperator.RIGHT_OUTER_JOIN);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_FULL opt_outer KW_JOIN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<JoinOperator>(_1_symbol.start, _0_symbol.end, JoinOperator.FULL_OUTER_JOIN);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_LEFT KW_SEMI KW_JOIN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<JoinOperator>(_2_symbol.start, _0_symbol.end, JoinOperator.LEFT_SEMI_JOIN);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_RIGHT KW_SEMI KW_JOIN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<JoinOperator>(_2_symbol.start, _0_symbol.end, JoinOperator.RIGHT_SEMI_JOIN);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_LEFT KW_ANTI KW_JOIN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<JoinOperator>(_2_symbol.start, _0_symbol.end, JoinOperator.LEFT_ANTI_JOIN);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_RIGHT KW_ANTI KW_JOIN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<JoinOperator>(_2_symbol.start, _0_symbol.end, JoinOperator.RIGHT_ANTI_JOIN);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_inner ::=
  KW_INNER
  |
  ;

opt_outer ::=
  KW_OUTER
  |
  ;

opt_plan_hints ::=
  COMMENTED_PLAN_HINTS:l
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<String> hints = new ArrayList<String>();
    String[] tokens = l.split(",");
    for (String token: tokens) {
      String trimmedToken = token.trim();
      if (trimmedToken.length() > 0) hints.add(trimmedToken);
    }
    RESULT = new ObjectSyntaxBlock<ArrayList<String>>(_0_symbol.start, _0_symbol.end, hints);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  /* legacy straight_join hint style */
  | KW_STRAIGHT_JOIN
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<String> hints = new ArrayList<String>();
    hints.add("straight_join");
    RESULT = new ObjectSyntaxBlock<ArrayList<String>>(_0_symbol.start, _0_symbol.end, hints);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  /* legacy plan-hint style */
  | LBRACKET ident_list:l RBRACKET
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = l;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

ident_list ::=
  ident_or_default:ident
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<String> list = new ArrayList<String>();
    list.add(ident.objectValue);
    RESULT = new ObjectSyntaxBlock<ArrayList<String>>(_0_symbol.start, _0_symbol.end, list);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | ident_list:list COMMA ident_or_default:ident
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(ident.objectValue);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

expr_list ::=
  expr:e
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<Expr> list = new ArrayList<Expr>();
    list.add(e);
    RESULT = new ObjectSyntaxBlock<ArrayList<Expr>>(_0_symbol.start, _0_symbol.end, list);
    RESULT.subBlocks = Lists.newArrayList(
       ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr_list:list COMMA expr:e
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(e);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

where_clause ::=
  KW_WHERE expr:e
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = e;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

group_by_clause ::=
  KW_GROUP KW_BY expr_list:l
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = l;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

having_clause ::=
  KW_HAVING expr:e
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = e;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

opt_order_by_clause ::=
  KW_ORDER KW_BY order_by_elements:l
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = l;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

order_by_elements ::=
  order_by_element:e
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<OrderByElement> list = new ArrayList<OrderByElement>();
    list.add(e);
    RESULT = new ObjectSyntaxBlock<ArrayList<OrderByElement>>(_0_symbol.start, _0_symbol.end, list);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | order_by_elements:list COMMA order_by_element:e
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(e);
    RESULT = list;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

order_by_element ::=
  expr:e opt_order_param:o opt_nulls_order_param:n
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new OrderByElement(e, o.objectValue,
        n != null ? n.objectValue : null);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_order_param ::=
  KW_ASC
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, true);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_DESC
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_0_symbol.start, _0_symbol.end, false);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {:
    RESULT = new ObjectSyntaxBlock<Boolean>(true);
  :}
  ;

opt_nulls_order_param ::=
  KW_NULLS KW_FIRST
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_1_symbol.start, _0_symbol.end, true);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_NULLS KW_LAST
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<Boolean>(_1_symbol.start, _0_symbol.end, false);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

opt_offset_param ::=
  KW_OFFSET expr:e
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = e;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

opt_limit_offset_clause ::=
  opt_limit_clause:limitExpr opt_offset_clause:offsetExpr
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new LimitElement(limitExpr, offsetExpr);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

opt_limit_clause ::=
  KW_LIMIT expr:limitExpr
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = limitExpr;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

opt_offset_clause ::=
  KW_OFFSET expr:offsetExpr
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = offsetExpr;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

cast_expr ::=
  KW_CAST LPAREN expr:e KW_AS type_def:targetType RPAREN
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CastExpr(targetType, e);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

case_expr ::=
  KW_CASE expr:caseExpr
    case_when_clause_list:whenClauseList
    case_else_clause:elseExpr
    KW_END
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CaseExpr(caseExpr, whenClauseList.objectValue, elseExpr);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_CASE
    case_when_clause_list:whenClauseList
    case_else_clause:elseExpr
    KW_END
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CaseExpr(null, whenClauseList.objectValue, elseExpr);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

case_when_clause_list ::=
  KW_WHEN expr:whenExpr KW_THEN expr:thenExpr
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    CaseWhenClause caseWhenClause = new CaseWhenClause(whenExpr, thenExpr);
    caseWhenClause.startPosition = _3_symbol.start;
    caseWhenClause.endPosition = _0_symbol.end;
    caseWhenClause.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );

    ArrayList<CaseWhenClause> list = new ArrayList<CaseWhenClause>();
    list.add(caseWhenClause);
    RESULT = new ObjectSyntaxBlock<ArrayList<CaseWhenClause>>(_3_symbol.start, _0_symbol.end, list);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | case_when_clause_list:list KW_WHEN expr:whenExpr
    KW_THEN expr:thenExpr
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    CaseWhenClause caseWhenClause = new CaseWhenClause(whenExpr, thenExpr);
    caseWhenClause.startPosition = _3_symbol.start;
    caseWhenClause.endPosition = _0_symbol.end;
    caseWhenClause.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );

    list.objectValue.add(caseWhenClause);
    RESULT = list;
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_3_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_1_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

case_else_clause ::=
  KW_ELSE expr:e
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = e;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  | /* emtpy */
  {: RESULT = null; :}
  ;

sign_chain_expr ::=
  SUBTRACT expr:e
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    // integrate signs into literals
    // integer literals require analysis to set their type, so the instance check below
    // is not equivalent to e.getType().isNumericType()
    if (e.isLiteral() && e instanceof NumericLiteral) {
      ((LiteralExpr)e).swapSign();
      RESULT = e;
      RESULT.startPosition = _1_symbol.start;
      RESULT.endPosition = _0_symbol.end;
      RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
    } else {
      RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY,
                                  new NumericLiteral(BigDecimal.valueOf(-1)), e);
      RESULT.startPosition = _1_symbol.start;
      RESULT.endPosition = _0_symbol.end;
      RESULT.subBlocks = Lists.newArrayList(
          ObjectSyntaxBlock.valueOf(_1_symbol),
          ObjectSyntaxBlock.valueOf(_0_symbol)
      );
    }
  :}
  | ADD expr:e
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = e;
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_1_symbol));
  :}
  ;

expr ::=
  non_pred_expr:e
  {: RESULT = e; :}
  | predicate:p
  {: RESULT = p; :}
  ;

exists_predicate ::=
  KW_EXISTS subquery:s
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ExistsPredicate(s, false);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

non_pred_expr ::=
  sign_chain_expr:e
  {: RESULT = e; :}
  | literal:l
  {: RESULT = l; :}
  | function_call_expr:e
  {: RESULT = e; :}
  | analytic_expr:e
  {: RESULT = e; :}
  /* Since "IF", "TRUNCATE" are keywords, need to special case these functions */
  | KW_IF LPAREN expr_list:exprs RPAREN
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new FunctionCallExpr("if", exprs.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_TRUNCATE LPAREN expr_list:exprs RPAREN
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new FunctionCallExpr("truncate", exprs.objectValue);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | cast_expr:c
  {: RESULT = c; :}
  | case_expr:c
  {: RESULT = c; :}
  | slot_ref:c
  {: RESULT = c; :}
  | timestamp_arithmetic_expr:e
  {: RESULT = e; :}
  | arithmetic_expr:e
  {: RESULT = e; :}
  | LPAREN non_pred_expr:e RPAREN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    e.setPrintSqlInParens(true);
    RESULT = e;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | subquery:s
  {: RESULT = s; :}
  ;

function_call_expr ::=
  function_name:fn_name LPAREN RPAREN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = FunctionCallExpr.createExpr(
        fn_name, new FunctionParams(new ArrayList<Expr>()));
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | function_name:fn_name LPAREN function_params:params RPAREN
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = FunctionCallExpr.createExpr(fn_name, params);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  // Below is a special case for EXTRACT. Idents are used to avoid adding new keywords.
  | function_name:fn_name LPAREN ident_or_default:u KW_FROM expr:t RPAREN
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ExtractFromExpr(fn_name, u.objectValue, t);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

// TODO: allow an arbitrary expr here instead of agg/fn call, and check during analysis?
// The parser errors aren't particularly easy to parse.
analytic_expr ::=
  function_call_expr:e KW_OVER
    LPAREN opt_partition_by_clause:p opt_order_by_clause:o opt_window_clause:w RPAREN
  {:
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    // Handle cases where function_call_expr resulted in a plain Expr
    if (!(e instanceof FunctionCallExpr)) {
      parser.parseError("over", SqlParserSymbols.KW_OVER);
    }
    FunctionCallExpr f = (FunctionCallExpr)e;
    f.setIsAnalyticFnCall(true);
    RESULT = new AnalyticExpr(f,
        p != null ? p.objectValue : null,
        o != null ? o.objectValue : null, w);
    RESULT.startPosition = _6_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  %prec KW_OVER
  ;

opt_partition_by_clause ::=
  KW_PARTITION KW_BY expr_list:l
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = l;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

opt_window_clause ::=
  window_type:t window_boundary:b
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AnalyticWindow(t.objectValue, b);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | window_type:t KW_BETWEEN window_boundary:l KW_AND window_boundary:r
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AnalyticWindow(t.objectValue, l, r);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | /* empty */
  {: RESULT = null; :}
  ;

window_type ::=
  KW_ROWS
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<AnalyticWindow.Type>(_0_symbol.start, _0_symbol.end, AnalyticWindow.Type.ROWS);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_RANGE
  {:
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ObjectSyntaxBlock<AnalyticWindow.Type>(_0_symbol.start, _0_symbol.end, AnalyticWindow.Type.RANGE);
    RESULT.startPosition = _0_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

window_boundary ::=
  KW_UNBOUNDED KW_PRECEDING
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AnalyticWindow.Boundary(
        AnalyticWindow.BoundaryType.UNBOUNDED_PRECEDING, null);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_UNBOUNDED KW_FOLLOWING
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AnalyticWindow.Boundary(
        AnalyticWindow.BoundaryType.UNBOUNDED_FOLLOWING, null);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | KW_CURRENT KW_ROW
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.CURRENT_ROW, null);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e KW_PRECEDING
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.PRECEDING, e);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e KW_FOLLOWING
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.FOLLOWING, e);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

arithmetic_expr ::=
  expr:e1 STAR expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 DIVIDE expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.DIVIDE, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 MOD expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MOD, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 KW_DIV expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.INT_DIVIDE, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 ADD expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.ADD, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 SUBTRACT expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 BITAND expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITAND, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 BITOR expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITOR, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 BITXOR expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITXOR, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | BITNOT expr:e
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITNOT, e, null);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e NOT
  {:
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.FACTORIAL, e, null);
    RESULT.startPosition = _1_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  %prec FACTORIAL
  ;

// We use IDENT for the temporal unit to avoid making DAY, YEAR, etc. keywords.
// This way we do not need to change existing uses of IDENT.
// We chose not to make DATE_ADD and DATE_SUB keywords for the same reason.
timestamp_arithmetic_expr ::=
  KW_INTERVAL expr:v IDENT:u ADD expr:t
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, true);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:t ADD KW_INTERVAL expr:v IDENT:u
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, false);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  // Set precedence to KW_INTERVAL (which is higher than ADD) for chaining.
  %prec KW_INTERVAL
  | expr:t SUBTRACT KW_INTERVAL expr:v IDENT:u
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT =
        new TimestampArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, t, v, u, false);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  // Set precedence to KW_INTERVAL (which is higher than ADD) for chaining.
  %prec KW_INTERVAL
  // Timestamp arithmetic expr that looks like a function call.
  // We use expr_list instead of expr to avoid a shift/reduce conflict with
  // expr_list on COMMA, and report an error if the list contains more than one expr.
  // Although we don't want to accept function names as the expr, we can't parse it
  // as just an IDENT due to the precedence conflict with function_name.
  | function_name:functionName LPAREN expr_list:l COMMA
    KW_INTERVAL expr:v IDENT:u RPAREN
  {:
    ExtendSymbol _7_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 7);
    ExtendSymbol _6_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 6);
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    if (l.objectValue.size() > 1) {
      // Report parsing failure on keyword interval.
      parser.parseError("interval", SqlParserSymbols.KW_INTERVAL);
    }
    ArrayList<String> fnNamePath = functionName.getFnNamePath();
    if (fnNamePath.size() > 1) {
      // This production should not accept fully qualified function names
      throw new Exception("interval should not be qualified by database name");
    }
    RESULT = new TimestampArithmeticExpr(fnNamePath.get(0), l.objectValue.get(0), v, u);
    RESULT.startPosition = _7_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_7_symbol),
        ObjectSyntaxBlock.valueOf(_6_symbol),
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

literal ::=
  INTEGER_LITERAL:l
  {:
    RESULT = new NumericLiteral(l);
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = symbol.end;
  :}
  | DECIMAL_LITERAL:l
  {:
    RESULT = new NumericLiteral(l);
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = symbol.end;
  :}
  | STRING_LITERAL:l
  {:
    RESULT = new StringLiteral(l);
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = symbol.end;
  :}
  | KW_TRUE
  {:
    RESULT = new BoolLiteral(true);
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = symbol.end;
  :}
  | KW_FALSE
  {:
    RESULT = new BoolLiteral(false);
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = symbol.end;
  :}
  | KW_NULL
  {:
    RESULT = new NullLiteral();
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = symbol.end;
  :}
  | UNMATCHED_STRING_LITERAL:l expr:e
  {:
    // we have an unmatched string literal.
    // to correctly report the root cause of this syntax error
    // we must force parsing to fail at this point,
    // and generate an unmatched string literal symbol
    // to be passed as the last seen token in the
    // error handling routine (otherwise some other token could be reported)
    parser.parseError("literal", SqlParserSymbols.UNMATCHED_STRING_LITERAL);
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = symbol.end;
  :}
  | NUMERIC_OVERFLOW:l
  {:
    // similar to the unmatched string literal case
    // we must terminate parsing at this point
    // and generate a corresponding symbol to be reported
    parser.parseError("literal", SqlParserSymbols.NUMERIC_OVERFLOW);
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = symbol.end;
  :}
  ;

function_params ::=
  STAR
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = FunctionParams.createStarParam();
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = symbol.end;
    RESULT.subBlocks = Lists.<SyntaxBlock>newArrayList(
        ObjectSyntaxBlock.valueOf(new ObjectSyntaxBlock<String>(symbol.start, symbol.end, symbol.text))
    );
  :}
  | KW_ALL STAR
  {:
    ExtendSymbol allSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol starSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = FunctionParams.createStarParam();
    RESULT.startPosition = allSymbol.start;
    RESULT.endPosition = starSymbol.end;
    RESULT.subBlocks = Lists.<SyntaxBlock>newArrayList(
        ObjectSyntaxBlock.valueOf(new ObjectSyntaxBlock<String>(allSymbol.start, allSymbol.end, allSymbol.text)),
        ObjectSyntaxBlock.valueOf(new ObjectSyntaxBlock<String>(starSymbol.start, starSymbol.end, starSymbol.text))
    );
  :}
  | expr_list:exprs
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new FunctionParams(false, exprs.objectValue);
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = symbol.end;
    RESULT.subBlocks = Lists.<SyntaxBlock>newArrayList(
        ObjectSyntaxBlock.valueOf(symbol)
    );
  :}
  | KW_ALL expr_list:exprs
  {:
    ExtendSymbol allPSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new FunctionParams(false, exprs.objectValue);
    RESULT.startPosition = allPSymbol.start;
    RESULT.endPosition = symbol.end;
    RESULT.subBlocks = Lists.<SyntaxBlock>newArrayList(
        ObjectSyntaxBlock.valueOf(new ObjectSyntaxBlock<String>(allPSymbol.start, allPSymbol.end, allPSymbol.text)),
        ObjectSyntaxBlock.valueOf(symbol)
    );
  :}
  | KW_DISTINCT:distinct expr_list:exprs
  {:
    ExtendSymbol distinctSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new FunctionParams(true, exprs.objectValue);
    RESULT.startPosition = distinctSymbol.start;
    RESULT.endPosition = symbol.end;
    RESULT.subBlocks = Lists.<SyntaxBlock>newArrayList(
        ObjectSyntaxBlock.valueOf(new ObjectSyntaxBlock<String>(distinctSymbol.start, distinctSymbol.end, distinctSymbol.text)),
        ObjectSyntaxBlock.valueOf(symbol)
    );
  :}
  | expr_list:exprs KW_IGNORE KW_NULLS
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol ignoreSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol nullsSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new FunctionParams(false, true, exprs.objectValue);
    RESULT.startPosition = symbol.start;
    RESULT.endPosition = nullsSymbol.end;
    RESULT.subBlocks = Lists.<SyntaxBlock>newArrayList(
        ObjectSyntaxBlock.valueOf(symbol),
        ObjectSyntaxBlock.valueOf(new ObjectSyntaxBlock<String>(ignoreSymbol.start, ignoreSymbol.end, ignoreSymbol.text)),
        ObjectSyntaxBlock.valueOf(new ObjectSyntaxBlock<String>(nullsSymbol.start, nullsSymbol.end, nullsSymbol.text))
    );
  :}
  ;

predicate ::=
  expr:e KW_IS KW_NULL
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new IsNullPredicate(e, false);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e KW_IS KW_NOT KW_NULL
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new IsNullPredicate(e, true);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | between_predicate:p
  {: RESULT = p; :}
  | comparison_predicate:p
  {: RESULT = p; :}
  | compound_predicate:p
  {: RESULT = p; :}
  | in_predicate:p
  {: RESULT = p; :}
  | exists_predicate:p
  {: RESULT = p; :}
  | like_predicate:p
  {: RESULT = p; :}
  | LPAREN predicate:p RPAREN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    p.setPrintSqlInParens(true);
    RESULT = p;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  ;

comparison_predicate ::=
  expr:e1 EQUAL expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.EQ, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 NOTEQUAL expr:e2 // single != token
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 NOT EQUAL expr:e2 // separate ! and = tokens
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 LESSTHAN GREATERTHAN expr:e2
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 LESSTHAN EQUAL expr:e2
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.LE, e1, e2);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 GREATERTHAN EQUAL expr:e2
  {:
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.GE, e1, e2);
    RESULT.startPosition = _3_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 LESSTHAN expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.LT, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 GREATERTHAN expr:e2
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.GT, e1, e2);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 LESSTHAN EQUAL GREATERTHAN expr:e2
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.NOT_DISTINCT, e1, e2);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 KW_IS KW_DISTINCT KW_FROM expr:e2
  {:
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.DISTINCT_FROM, e1, e2);
    RESULT.startPosition = _4_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  | expr:e1 KW_IS KW_NOT KW_DISTINCT KW_FROM expr:e2
  {:
    ExtendSymbol _5_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol _4_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol _3_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BinaryPredicate(BinaryPredicate.Operator.NOT_DISTINCT, e1, e2);
    RESULT.startPosition = _5_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_5_symbol),
        ObjectSyntaxBlock.valueOf(_4_symbol),
        ObjectSyntaxBlock.valueOf(_3_symbol),
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

like_predicate ::=
  expr:e1 KW_LIKE expr:e2
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol likePSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new LikePredicate(LikePredicate.Operator.LIKE, e1, e2);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(likePSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
  :}
  | expr:e1 KW_ILIKE expr:e2
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol ilikePSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new LikePredicate(LikePredicate.Operator.ILIKE, e1, e2);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(ilikePSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
  :}
  | expr:e1 KW_RLIKE expr:e2
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol rlikePSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new LikePredicate(LikePredicate.Operator.RLIKE, e1, e2);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(rlikePSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
  :}
  | expr:e1 KW_REGEXP expr:e2
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol regexpPSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(regexpPSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
  :}
  | expr:e1 KW_IREGEXP expr:e2
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol iregexpPSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new LikePredicate(LikePredicate.Operator.IREGEXP, e1, e2);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(iregexpPSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
  :}
  | expr:e1 KW_NOT KW_LIKE expr:e2
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol likeSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    LikePredicate likePredicate = new LikePredicate(LikePredicate.Operator.LIKE, e1, e2);
    likePredicate.startPosition = likeSymbol.start;
    likePredicate.endPosition = expr2Symbol.end;
    likePredicate.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(likeSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
    RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, likePredicate, null);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(likeSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
  :}
  | expr:e1 KW_NOT KW_ILIKE expr:e2
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol ilikeSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    LikePredicate ilikePredicate = new LikePredicate(LikePredicate.Operator.ILIKE, e1, e2);
    ilikePredicate.startPosition = ilikeSymbol.start;
    ilikePredicate.endPosition = expr2Symbol.end;
    ilikePredicate.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(ilikeSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
    RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, ilikePredicate, null);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(ilikeSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
  :}
  | expr:e1 KW_NOT KW_RLIKE expr:e2
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol rlikeSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    LikePredicate rlikePredicate = new LikePredicate(LikePredicate.Operator.RLIKE, e1, e2);
    rlikePredicate.startPosition = rlikeSymbol.start;
    rlikePredicate.endPosition = expr2Symbol.end;
    rlikePredicate.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(rlikeSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );

    RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, rlikePredicate, null);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(rlikeSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
  :}
  | expr:e1 KW_NOT KW_REGEXP expr:e2
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol regexpSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    LikePredicate likePredicate = new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2);
    likePredicate.startPosition = regexpSymbol.start;
    likePredicate.endPosition = expr2Symbol.end;
    likePredicate.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(regexpSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );

    RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, likePredicate, null);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(regexpSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
  :}
  | expr:e1 KW_NOT KW_IREGEXP expr:e2
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol iregexpSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    LikePredicate likePredicate = new LikePredicate(LikePredicate.Operator.IREGEXP, e1, e2);
    likePredicate.startPosition = iregexpSymbol.start;
    likePredicate.endPosition = expr2Symbol.end;
    likePredicate.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(iregexpSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );

    RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, likePredicate, null);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(iregexpSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol)
    );
  :}
  ;

// Avoid a reduce/reduce conflict with compound_predicate by explicitly
// using non_pred_expr and predicate separately instead of expr.
between_predicate ::=
  expr:e1 KW_BETWEEN non_pred_expr:e2 KW_AND expr:e3
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol betweenSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol andSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr3Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BetweenPredicate(e1, e2, e3, false);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr3Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(betweenSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol),
        ObjectSyntaxBlock.valueOf(andSymbol),
        ObjectSyntaxBlock.valueOf(expr3Symbol)
    );
  :}
  | expr:e1 KW_BETWEEN predicate:e2 KW_AND expr:e3
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol betweenSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol andSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr3Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BetweenPredicate(e1, e2, e3, false);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr3Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(betweenSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol),
        ObjectSyntaxBlock.valueOf(andSymbol),
        ObjectSyntaxBlock.valueOf(expr3Symbol)
    );
  :}
  | expr:e1 KW_NOT KW_BETWEEN non_pred_expr:e2 KW_AND expr:e3
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol betweenSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol andSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr3Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BetweenPredicate(e1, e2, e3, true);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr3Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(betweenSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol),
        ObjectSyntaxBlock.valueOf(andSymbol),
        ObjectSyntaxBlock.valueOf(expr3Symbol)
    );
  :}
  | expr:e1 KW_NOT KW_BETWEEN predicate:e2 KW_AND expr:e3
  {:
    ExtendSymbol expr1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol betweenSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol expr2Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol andSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol expr3Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new BetweenPredicate(e1, e2, e3, true);
    RESULT.startPosition = expr1Symbol.start;
    RESULT.endPosition = expr3Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(expr1Symbol),
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(betweenSymbol),
        ObjectSyntaxBlock.valueOf(expr2Symbol),
        ObjectSyntaxBlock.valueOf(andSymbol),
        ObjectSyntaxBlock.valueOf(expr3Symbol)
    );
  :}
  ;

in_predicate ::=
  expr:e KW_IN LPAREN expr_list:l RPAREN
  {:
    ExtendSymbol exprSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol inSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol lparenSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol exprListSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol rparenSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new InPredicate(e, l.objectValue, false);
    RESULT.startPosition = exprSymbol.start;
    RESULT.endPosition = rparenSymbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(exprSymbol),
        ObjectSyntaxBlock.valueOf(inSymbol),
        ObjectSyntaxBlock.valueOf(lparenSymbol),
        ObjectSyntaxBlock.valueOf(exprListSymbol),
        ObjectSyntaxBlock.valueOf(rparenSymbol)
    );
  :}
  | expr:e KW_NOT KW_IN LPAREN expr_list:l RPAREN
  {:
    ExtendSymbol exprSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 5);
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 4);
    ExtendSymbol inSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol lparenSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol exprListSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol rparenSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new InPredicate(e, l.objectValue, true);
    RESULT.startPosition = exprSymbol.start;
    RESULT.endPosition = rparenSymbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(exprSymbol),
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(inSymbol),
        ObjectSyntaxBlock.valueOf(lparenSymbol),
        ObjectSyntaxBlock.valueOf(exprListSymbol),
        ObjectSyntaxBlock.valueOf(rparenSymbol)
    );
  :}
  | expr:e KW_IN subquery:s
  {:
    ExtendSymbol exprSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol inSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol subQuerySymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new InPredicate(e, s, false);
    RESULT.startPosition = exprSymbol.start;
    RESULT.endPosition = subQuerySymbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(exprSymbol),
        ObjectSyntaxBlock.valueOf(inSymbol),
        ObjectSyntaxBlock.valueOf(subQuerySymbol)
    );
  :}
  | expr:e KW_NOT KW_IN subquery:s
  {:
    ExtendSymbol exprSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol inSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol subQuerySymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new InPredicate(e, s, true);
    RESULT.startPosition = exprSymbol.start;
    RESULT.endPosition = subQuerySymbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(exprSymbol),
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(inSymbol),
        ObjectSyntaxBlock.valueOf(subQuerySymbol)
    );
  :}
  ;

subquery ::=
  LPAREN subquery:s RPAREN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = s;
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks.add(0, ObjectSyntaxBlock.valueOf(_2_symbol));
    RESULT.subBlocks.add(ObjectSyntaxBlock.valueOf(_0_symbol));
  :}
  | LPAREN query_stmt:s RPAREN
  {:
    ExtendSymbol _2_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol _1_symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol _0_symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new Subquery(s);
    RESULT.startPosition = _2_symbol.start;
    RESULT.endPosition = _0_symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(_2_symbol),
        ObjectSyntaxBlock.valueOf(_1_symbol),
        ObjectSyntaxBlock.valueOf(_0_symbol)
    );
  :}
  ;

compound_predicate ::=
  expr:e1 KW_AND expr:e2
  {:
    ExtendSymbol e1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol andSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol e2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CompoundPredicate(CompoundPredicate.Operator.AND, e1, e2);
    RESULT.startPosition = e1Symbol.start;
    RESULT.endPosition = e2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(e1Symbol),
        ObjectSyntaxBlock.valueOf(andSymbol),
        ObjectSyntaxBlock.valueOf(e2Symbol)
    );
  :}
  | expr:e1 KW_OR expr:e2
  {:
    ExtendSymbol e1Symbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol orSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol e2Symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CompoundPredicate(CompoundPredicate.Operator.OR, e1, e2);
    RESULT.startPosition = e1Symbol.start;
    RESULT.endPosition = e2Symbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(e1Symbol),
        ObjectSyntaxBlock.valueOf(orSymbol),
        ObjectSyntaxBlock.valueOf(e2Symbol)
    );
  :}
  | KW_NOT expr:e
  {:
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol exprSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null);
    RESULT.startPosition = notSymbol.start;
    RESULT.endPosition = exprSymbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(exprSymbol)
    );
  :}
  | NOT expr:e
  {:
    ExtendSymbol notSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol exprSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null);
    RESULT.startPosition = notSymbol.start;
    RESULT.endPosition = exprSymbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(notSymbol),
        ObjectSyntaxBlock.valueOf(exprSymbol)
    );
  :}
  ;

slot_ref ::=
  dotted_path:path
  {:
    ExtendSymbol pathSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new SlotRef(path.objectValue);
    RESULT.startPosition = pathSymbol.start;
    RESULT.endPosition = pathSymbol.end;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(pathSymbol)
    );
  :}
  ;

dotted_path ::=
  ident_or_default:ident
  {:
    ArrayList<String> list = new ArrayList<String>();
    list.add(ident.objectValue);

    ExtendSymbol identSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<ArrayList<String>>(identSymbol.start, identSymbol.end, list);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(ident)
    );
  :}
  | dotted_path:list DOT ident_or_default:ident
  {:
    ExtendSymbol listSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol dotSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol identSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.objectValue.add(ident.objectValue);

    RESULT = list;
    list.startPosition = listSymbol.start;
    list.endPosition = identSymbol.end;
    list.subBlocks.add(ObjectSyntaxBlock.valueOf(dotSymbol));
    list.subBlocks.add(ObjectSyntaxBlock.valueOf(identSymbol));
  :}
  ;

type_def ::=
  type:t
  {:
    RESULT = new TypeDef(t.objectValue);
    RESULT.startPosition = t.startPosition;
    RESULT.endPosition = t.endPosition;
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(t)
    );
  :}
  ;

type ::=
  KW_TINYINT
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.TINYINT);
  :}
  | KW_SMALLINT
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.SMALLINT);
  :}
  | KW_INT
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.INT);
  :}
  | KW_BIGINT
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.BIGINT);
  :}
  | KW_BOOLEAN
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.BOOLEAN);
  :}
  | KW_FLOAT
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.FLOAT);
  :}
  | KW_DOUBLE
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.DOUBLE);
  :}
  | KW_DATE
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.DATE);
  :}
  | KW_DATETIME
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.DATETIME);
  :}
  | KW_TIMESTAMP
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.TIMESTAMP);
  :}
  | KW_STRING
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.STRING);
  :}
  | KW_VARCHAR LPAREN INTEGER_LITERAL:len RPAREN
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    Type varcharType = ScalarType.createVarcharType(len.intValue());
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, varcharType);
  :}
  | KW_VARCHAR
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.STRING);
  :}
  | KW_BINARY
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, Type.BINARY);
  :}
  | KW_CHAR LPAREN INTEGER_LITERAL:len RPAREN
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    Type charType = ScalarType.createCharType(len.intValue());
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, charType);
  :}
  | KW_DECIMAL LPAREN INTEGER_LITERAL:precision RPAREN
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    Type decimalType = ScalarType.createDecimalType(precision.intValue());
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, decimalType);
  :}
  | KW_DECIMAL LPAREN INTEGER_LITERAL:precision COMMA INTEGER_LITERAL:scale RPAREN
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    Type decimalType = ScalarType.createDecimalType(precision.intValue(), scale.intValue());
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, decimalType);
  :}
  | KW_DECIMAL
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    Type decimalType = ScalarType.createDecimalType();
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, decimalType);
  :}
  | KW_ARRAY LESSTHAN type:value_type GREATERTHAN
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    Type arrayType = new ArrayType(value_type.objectValue);
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, arrayType);
  :}
  | KW_MAP LESSTHAN type:key_type COMMA type:value_type GREATERTHAN
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    Type mapType = new MapType(key_type.objectValue, value_type.objectValue);
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, mapType);
  :}
  | KW_STRUCT LESSTHAN struct_field_def_list:fields GREATERTHAN
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    Type structType = new StructType(fields.objectValue);
    RESULT = new ObjectSyntaxBlock<Type>(symbol.start, symbol.end, structType);
  :}
  ;

// Recognize identifiers and keywords as struct-field names such
// that we can parse type strings from the Hive Metastore which
// may have unquoted identifiers corresponding to keywords.
struct_field_def ::=
  ident_or_keyword:name COLON type:t opt_comment_val:comment
  {:
    ExtendSymbol nameSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 3);
    ExtendSymbol colonSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol typeSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol commentSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    StructField structField = new StructField(name.objectValue, t.objectValue,
        comment != null ? comment.objectValue : null);
    RESULT = new ObjectSyntaxBlock<StructField>(nameSymbol.start, commentSymbol.end, structField);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(nameSymbol),
        ObjectSyntaxBlock.valueOf(colonSymbol),
        ObjectSyntaxBlock.valueOf(typeSymbol),
        ObjectSyntaxBlock.valueOf(commentSymbol)
    );
  :}
  ;

struct_field_def_list ::=
  struct_field_def:field_def
  {:
    ExtendSymbol structFieldDefSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    ArrayList<StructField> list = new ArrayList<StructField>();
    list.add(field_def.objectValue);

    RESULT = new ObjectSyntaxBlock<ArrayList<StructField>>(structFieldDefSymbol.start, structFieldDefSymbol.end, list);
    RESULT.subBlocks = Lists.newArrayList(
        ObjectSyntaxBlock.valueOf(structFieldDefSymbol)
    );
  :}
  | struct_field_def_list:list COMMA struct_field_def:field_def
  {:
    ExtendSymbol structListSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 2);
    ExtendSymbol commaSymbol = (ExtendSymbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top - 1);
    ExtendSymbol structFieldDefSymbol = (ExtendSymbol) CUP$SqlParser$stack.peek();

    list.endPosition = structFieldDefSymbol.end;
    list.subBlocks.add(ObjectSyntaxBlock.valueOf(commaSymbol));
    list.subBlocks.add(ObjectSyntaxBlock.valueOf(structFieldDefSymbol));
    list.objectValue.add(field_def.objectValue);
    RESULT = list;
  :}
  ;

ident_or_default ::=
  IDENT:name
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, name.toString());
  :}
  | KW_DEFAULT:name
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, name.toString());
  :}
  ;

ident_or_keyword ::=
  IDENT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ADD:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_AGGREGATE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ALL:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ALTER:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ANALYTIC:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_AND:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ANTI:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_API_VERSION:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ARRAY:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_AS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ASC:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_AVRO:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_BETWEEN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_BIGINT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_BINARY:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_BLOCKSIZE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_BOOLEAN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_BY:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CACHED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CASCADE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CASE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CAST:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CHANGE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CHAR:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CLASS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CLOSE_FN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_COLUMN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_COLUMNS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_COMMENT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_COMPRESSION:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_COMPUTE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CREATE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CROSS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_CURRENT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DATA:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DATABASE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DATABASES:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DATE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DATETIME:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DECIMAL:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DEFAULT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DELETE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DELIMITED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DESC:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DESCRIBE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DISTINCT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DIV:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DOUBLE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_DROP:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ELSE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ENCODING:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_END:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ESCAPED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_EXISTS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_EXPLAIN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_EXTENDED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_EXTERNAL:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FALSE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FIELDS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FILEFORMAT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FILES:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FINALIZE_FN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FIRST:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FLOAT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FOLLOWING:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FOR:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FORMAT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FORMATTED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FROM:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FULL:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FUNCTION:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_FUNCTIONS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_GRANT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_GROUP:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_HAVING:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_HASH:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_IF:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_IGNORE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ILIKE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_IN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_INCREMENTAL:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_INIT_FN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_INNER:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_INPATH:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_INSERT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_INT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_INTERMEDIATE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_INTERVAL:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_INTO:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_INVALIDATE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_IREGEXP:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_IS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_JOIN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_KUDU:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_LAST:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_LEFT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_LIKE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_LIMIT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_LINES:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_LOAD:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_LOCATION:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_MAP:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_MERGE_FN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_METADATA:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_NOT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_NULL:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_NULLS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_OFFSET:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ON:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_OR:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ORDER:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_OUTER:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_OVER:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_OVERWRITE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_PARQUET:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_PARQUETFILE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_PARTITION:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_PARTITIONED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_PARTITIONS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_PRECEDING:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_PREPARE_FN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_PRIMARY:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_PRODUCED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_PURGE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_RANGE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_RCFILE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_RECOVER:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_REFRESH:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_REGEXP:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_RENAME:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_REPLACE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_REPLICATION:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_RESTRICT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_RETURNS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_REVOKE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_RIGHT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_RLIKE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ROLE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ROLES:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ROW:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_ROWS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SCHEMA:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SCHEMAS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SELECT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SEMI:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SEQUENCEFILE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SERDEPROPERTIES:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SERIALIZE_FN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SET:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SHOW:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SMALLINT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_STORED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_STRAIGHT_JOIN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_STRING:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_STRUCT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_SYMBOL:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_TABLE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_TABLES:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_TBLPROPERTIES:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_TERMINATED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_TEXTFILE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_THEN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_TIMESTAMP:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_TINYINT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_TRUNCATE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_STATS:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_TO:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_TRUE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_UNBOUNDED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_UNCACHED:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_UNION:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_UPDATE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_UPDATE_FN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_UPSERT:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_USE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_USING:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_VALUES:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_VARCHAR:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_VIEW:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_WHEN:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_WHERE:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  | KW_WITH:r
  {:
    ExtendSymbol symbol = (ExtendSymbol) CUP$SqlParser$stack.peek();
    RESULT = new ObjectSyntaxBlock<String>(symbol.start, symbol.end, r.toString());
  :}
  ;
